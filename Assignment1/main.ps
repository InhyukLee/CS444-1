%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: main.dvi
%%CreationDate: Wed May 17 16:52:23 2017
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusRomNo9L-Regu NimbusRomNo9L-ReguItal
%%+ NimbusRomNo9L-Medi
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter main.dvi -o main.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.05.17:1652
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BD85F4DFDA1A69D18A
95EF6E1C8A6EFEBAF9D3D0CBFD6FA67EA64945440BE6F34771C491C607BFB199
7469D73961C0E8DAEC14FC13ECF37514DBF9C5A991943BDBF66C0ACA84BEDF8B
54AFD478D9695FCAA0E4FA51CC6C3A84D3D5904EBBD089B189203DF7239A2394
F2B5338FB0603488E278EE68F3CE7397B142062BCD6A62AFF936B2ACEF919E57
21FA55672F22685B5305F5E84900C327E20248F7DDEC431EDFEF8F922EFEBD58
EDDA265414D834391381C29CAC17FACD0A2F071460BE0D3DC7F6450E768DDF4A
D39B8E27065A8D236EE9643C209A36CBC8AB1D87C7B3FDEAEBE82AC779558FA9
15EFAB7C582B6CFAF3F8B174B1223D531067BA929EABBE1404DC599682276A0C
03309EBD39951A398883FC919A711E8E891F64657D64B43EAF4ACBAC482D06AF
D458F0DC3F4885030096DEA6AF7AD28E2DD526D66EF00BB3F4970C162A20E2A0
3AFFF9D6B0AF70E1D643784CCA5F0B76FA16D597879F762BF7CE394D18DC76D2
06301A735F3377789FDAFC843F9B3B635BC7871DBCF2B8BE5E7E6290AB1C4B10
165DE8C3E9109949A8FC60CB19EAADBDA8CE8FA7FCCEDE1BD4B8566A268801A7
2428B8193F4A9F02506DAA39886CAC4D93D6E6823E197EEFB4A340040C1C50BA
4952CFE767074B3615FDB279B9BCC0993871E9718A75DFFFC74395B532A58983
B7E3AB32A13A3DC4FAE0E34E485C31FB2952DAD2A611798A9B23C8C0EE5E1CDE
0C9307615D2E9E878FB834D9FAC1883222A1C90CA4E940136520C8AF7DC481A5
C5E4287325A010FC44DCCA752F57806D70EABB20327400158978ABC35805453F
84CC5EEC991A5CDC8C33DADDDB5F3E6A05FB23C6ADF68AA8E7C5D414CD00C38F
DE62D80BCEF133DD294C29F6733342DE8A3045682DCE853E4EBE3E7A12A2FEEA
AD456278453BF6398EFF405D523BD8065E247D2E67C4A1234AA8AF98A8627F7F
AA141AF83BA5FDF29A91974E96B000709F3B59A1BA4327C8709EECEDE568036C
DB87B6651FE6D0F4F85BD7DBF26439B8933B54AC4C093499061E64669B41759D
F26FC0366B285A40567C1C3DDC8EE3B058D81A0DD4C1056EF47FDD8A06EA4A97
5FB62CF59CCAFEF4BB4AB1265FB86CF3966E8BB923D32BBE01A9D28D26CBB539
DE18871F91EDD0412DB052CA15266F970EC234868C04AF987358EE0D27AA7FD0
E5E35824C7D7863738C2AE79C875B5C7A1E18E695E984ECEA0E37C428FD741DB
E14E0C10896BEDBF25262B1C95F281E6C448D9A1FC92A5039BED5F5C9B9770AB
F579FC911085FF2247D8C7EBBE4E95D9CF6F8D4D204CC6D61EDA882A6094E407
A823BEB4FDBC9149EF33A77FFBB71286FF5DF5F69DCD8FB92B332FB6509FC3FA
395199F80AE4BD687C783B27501C603CD989F14A2A0A5680752BE8757F0C4935
22A4B260C55A31AA1939D02873061EC2A949B71B69F6AEBEE72A3DA240341298
7F9D1EA8218936D444BDCCB32D592B00EA16242C2CC6BFC9FE657D9270933D8B
167D2575CF146336BB1C76735D591BBFD9589D9FB42768AF8CAFD1490D4A0B81
934AFD497D46D286CEEFBB71E57F70E9EDD479DE21D36AD751E04215CA250B7C
6831F55435E628A295E895BD0905AFE3DC207C637F63A1F68C6D5A2C2369388C
D6A48AF4965A35699E84DAD2BB26222664A366C18C851E85F85AE177F1CA2958
718576759631D8A0E1DB083B670C05C8A82F2CA3502F6BD5B5E99175BBC27E47
183383C25CCA202965C0AB8DE61C7AE328D54C486D483764CF1C68B5E3A28F83
EF3C473B033093A4C4E5A2A2C775BC222153CC2915AD1B0D42D7EDC04CC4388E
4E1DC51A850EB7159B78F345B1EB3B7E8780006DC8C77665A92307FC96B154B8
3CAC7C350E0E7B2783BED64F9CCEDDDC86470CBBBC247F1BB2C9F91A707EC97E
B56BEF81D5E3AB9A0D100749A5D47C5D14BF05BF722D779C844820114952C97A
AD869F128286F9BDDB2548C635741759C1BEA3DE43B426C5E175B059005BF291
1E6D4B96C71136B1C1AF8703A1A0E517BE42CD6306FC68448D3E45FA5C4C71AE
88CB1F10D0DD754C5FD1B4ED497C48C76BD9C1ED9DB78BF62E9AD2222E5BEE9F
D2B26FB8B5C997DF742A415DAA0CE1B8745736395AE80BA78C0157DB843CC75F
CDAA40A5C9A5623B07973E227FCAD9D6B9E25671F9AC599A40C37B2439C06FDB
85B7E6235255F3B9781519418354B3C9D4EEDFE9BECEE5D25F8D2B1B99B73FFE
CCAF7C7531842B95B7A06E976101B7018BD702271DEE3CA37C242494FFCF3F66
28357EDBB00B60E26CAD17086C48CEA3FF695D5E8F1A0FA12A092840A740F3C7
5A30C1B241A0DFA7D0B4ABD916DFBBD382DA926E53CEE7C94E6B1552C08ED6E2
0938B639750FF981F5C988527B2ED63600DD884E59FABD2C48903EB29EAC610A
DA000A7D6D9CAAC29D26D8FF7AF6E0E6E181AB858313D2F697474CBE515CB2A5
C1CDE2B37C804F50577B6D1308DD9C414C5FA5EB6D89CEC580A966AF5D4A79D5
93015B4C63E38F7CDA8CCBE3F6B306D1B8B98BA21C7367442C2269BCDC272724
858A522B9E47D4B5ED68BDDAFC0E87886861B4F5C0C775C25AFF4F5099CD3A2F
A59ACA73571731EBB1E7A05CF22CE0A8FE40F401BE961183024AA833B0D84487
B7BBEAD90EE57EEE028900491428174094903A8B55340E2A24629A3BB1A0D986
D709320935CA25DCB7C07A9FD4973CA9936C7CEBD55EB56E4256AD92A62AFCB5
623DA1351D02A4D937CE83E61D136433D6AFE0AB05959E694040B3A603BA30E9
CDD920B0F7E2C3F9DEF227F7FEF2F7ADE67F92F01AFAE02C1EF70DD55434CC97
F2AABDC5EA42375BB856547BF49B35078DE8E159BF652B41D43AF066BA97A808
C5F6CBF83D680B7172E4F3B97181AEDC88F1529074E1E723F52AB30EF02D5439
DA42BF85A49450B3BF897DD408DE02CD0B95678E310D30EB6B4F7C1511AD7EFE
947288FA4636177DD322B42B7A2541D2F9E23E7E88CC3568A0CB65E6B0CFFD89
A4E35714D6E337043CCFAAE973B27BF586E1807066B3187B5579DF82A116B1F4
E1E51183DF484745209732E220F41FCF4D21EC01E165CCC06D340E3C1C080730
6804D3393EA9B557A9D2B7FCCE08F44F089393FCA362BC59A995FE5430B39CB5
EC916B74A906E06A2E0D9DFBDC28DE2F4431F3A1923FA3C5F1EFF9EB42A6F342
8012077754BA3854A60A3676CE5E74D442F649EB701A213ABF73C242AA4314B9
EF98EF4CDD29B3B4B551C48CF2F739CB2EC7AC3F669435F72025753B66C370B6
EF2393B15EA8BC4D582059B0C9FC382206528161CBC25F1D7566E941344CCA69
ACB4FAF9B4879A99BCAF708E326D070B8A72B4B3BE25B00D40D17D352B303F25
18E05CFDC4DFA697683ECBDB9132F4F4AEEF704A5E8F6E9AD1631F9E304203D2
9D5F2223707B0F5B54914B7A937D73EF4DBFF505B083421014A3A628D302697B
4125B5FFD2CB27C6DDBA4D9E7CA473A1FD2E01CB1197990EDF8444CC83F1AF72
EDFE30E2A69EF059754C9D3C65045928E89D218F17D9AF2EA193589D9BA89EF8
292B89AB423702DC554ADCC6A93A6C0E4A2AE7B930B69005A3A2C1225FF0F867
1FC171D3FE1289FBB4C85DA9E4F47114F95B372360DDAD8DCA6D6241D713E8AB
0AA3C15471C19ED3B2D164FEC5B6526CF900EF50B0BD8CA69F58C3893A7298A8
F22A9D8644F638DA7E0CF9595EE1F523F4A0D7B12E0C3544B1F4FB0E4FA43A72
3AF22C4CC8DC7E2394C4BB18CFAE381C90E40AB6A8B33BC05A3C7F65D69E7127
AC4128988F493604E1BC8DCE99225BCA1928AF2BEBA473AB452018BAE8ECD5B2
A3593234EE1759688AE7F151076AF9FAE9424B0E3DAE6F2B4E697136395A3CC0
4D886FE80B0E447A91BFAE343170B39C0F2210FD68718C39BD2CADD6E7C35AF7
BF31F66264985999B648A29114BEB6794EF818060F4C050898C15214E1938392
F13CDA64C769C42D35ACBEFA6921AF5CCEF02233A79FE1E56B1ACFC2AFFE1C0A
4414DA781D4972650DE2F873F10E46CDFC90C1E27E1E1F73659FA5E5B4F9F4CE
132827235272A63A44CAD16BF50FBB434CF0071A8CF1369BC60A209F20973002
6EF92001B5C5DE4CD0AE2BB9F8F5BB4DAAB9CBA81CAD361C8E7F3D7C64C5E65A
178258BA2B97ED6782134F5B43D6E82DCD40E8CD287ABE7FF1C9476D3540344C
36224230B9826E6322C4D6231EFE10719E907FECF478F72F7C3EBE04470D1364
33372FB330C9251103E567412791F5265392E03264AE22D81E75A04AE68344A9
F1578BB018C6A839C97045B57B306D56772FFB7615A3D0A129E912402DD96FD5
3B69AE8BEEBF522EDA7D735014541441216027C63FE9DA78EBF6575AB221C113
F8E414A20AD494D0808809572A0A32125FA4D78B525B256291C90BEBBD1D6975
9B642656D955AD16E5AEE848E6112C26849FC88671715A436DD4EFBFD0DD1818
965337B8CE9F6804F7FEE6A373F4674AD17C39E1F2030FC5F4F3B99B170637FC
4891945C512870DB2513AC102D0673430681996EE5143F8C0213688E65CAFF68
AC40D72FDA940CA8D2B407FB7DC2CCDD04106ACD768CF721EA47A63F697896B2
DB3F1ADD56AE711F16046B325D076FD0ADEEBDAD503879FD5BF2E9D3D05FB1BD
CB0EE4A8E1468CE3ED71A2EAD9235F1BD2D1E3EADAF9683222F07BB1F070639C
AD1BAF633326189C155E3DEF1E25B3403900252081CAE3E6CFF73606942E6F66
4F2CAD516FA3981DB5439C6652666AADBC2FAFB47748675C775A1EAFCC93F7EB
E4E1C660F6E1E05366ED200A3E21F8BADC7E03359C8384F09863DF49B3077851
16B671A510962F9CC9D17FEA20F216A49C0468B0F7B0CF33171114F2B6C27274
3F1E5B9739580BB52E80105F062F87834C006FF3D2AFEE54EE59D2A702421DEB
9F5AD6FFA10DA8E36D2AC5BD63FB69472D782C13E6E6BA308828E86BFE5D88B9
F9B55A837E93E5B3AFBDD4AC4A6CFEE894491692973EB657B78FB4C702930F8F
2B62429ABEC22CEB9E37BACE12610CE0358A6D5C0E52BB4F29AB447497485FE4
FFD3F8CB891B647E2193842D0967AF8CC34356FFBB17679ABA8C37C342283641
6DC50F7333505B8BD1C756361BF7F774505ECF312B9754FE6BD3B4E612415332
B5EBCCBA6EBF181B0397813E9284A50ECBC489593DFFD65E979D8392C29DD522
446D60842E7836ADC47966D70C09BE127F8476C164D9AF69A47DF33A786F93CD
5AD1B4104F189866C6176F474AAA7EFE1C5325DA3826B6B322E6EF96FEE9927F
1DC290026E2A1FBC1BD380B6FA3013A922F5103CA714294F40DE6D98FF92B59E
F2B884DA5B4E662A1702D7533DB1E4EEC492CAC8CD419F06D18EEBF98FFECD6F
9C7EFD3938553AEAC074A3C5B56B2929AFAA87E9684048DE8CCD15659B5449DD
7E1E44C30708B8D586177DB0145733A0F6E30BF6895C7CE0948A3810C41755FE
D6A8A0D920B8CDF4B7744AACF173EBD43A219BE082D84C252182A8982C1200FC
042913507E93852BA535BEFD5C340EF34018D8EB08DF26D7733BBF6E1C05922F
75DED258E2ED7A6C24D92C8890AF118D3EEB3396A951C50365EB593B141DEC06
72CBF20BCA90A3462904ED803064219D42611AF1B0B4AEB313F302A0F648EB00
13FB2A796201976C635462BD50BAEA04E96DC81F6F9F742A10CFFDABEB15545B
1E4C87A50F0733AB3264B5CA18351F0344A741D6783216FF4020C519425AC505
6E7AD9D23E86ABCE6E1FCEF61CD2A5097CB99257F994B1BC6F40533913EDAAFB
16584BA22E904A0ADB02D35431D5E60DA07C43942B964AD0A72AFD686EA1AB2A
2ED7F85218CD865BC4D63F6B7CEDE960341CD938A77A1FEB6C3C9EE6E1530F5D
D9FBA036526FCEF4B9B70F4D74566C8DF79650D8F66F105A29EC1AFE13995FBD
B638133E913CA35031B1A9F769159B7E7BB7C5977F09630EF6A7F053CCA59596
65E40FE323256A366A45877CF940C94086512DE776A9DDF64744F8EA46F07BB8
A4E027FC942FC7CA66CBB224FBF95B8DE8FB0274CC120718A9ADB97DB2754BD1
677B9620CC6631A369797125990858F997E47123FAD84ED19128C657C809FA88
17DF9EED37898E8619507D9EBD179E3D9F1133FC6017AE2F967BCB97046EA3E2
D3864D9C73CA1758A4B047DACF3476650B37A5614CB33C1495CF2986667C353C
474CC7667A5E6315EECC69807C89A23579159478AAC3069CD3EA733EB51F66C6
861E8C7BFA5F6CB780E69545567B2D7D0891B23C9B3F21ED67889D8D6E203737
7FA7CCD8A82788A4CAACFCD4C5B5A6EAE517CDE929F6E5DF7E097E47D26E7AB4
360CD149B91B48826675A0963BB33C5D84B141382251ED346C26BF3F435E6A6E
9147BC1B68EA135225157DBC43E1D7D924761911915BDD9535892BDFF3D4DC3C
CBD4AEBB684EEAB78BC994D6BFFD0B156FC492F6BD7B6E77DAB797832A05A92D
139A80ECA6D61BE7D20CA221758CD5E63CB7EBFD4F38C31CF4FBD46EB44215D6
E646EC3180286539F9BF11DA75BD2522D53162BA21E584BE47412E4A386569D9
DEE8754EBA551B635693EC4FEEA9CDAE311B8E86B3442888C9A7C62369E67BAE
BC7F43467AEAB156547A3094786A8B0306926BEC3DB7FE51F547AE273876946F
F72DA1DA89CF6F9FBFACA3A735ED0119A05EDF5D231A47C10DE60A539D53983C
4875D056EC205D49AE67AC7CB9682CE60E17947E7E675D19901C7E8272C8A0F4
E84DCECA6AEC42602316F201851D31F54E6002A72874764BD1BAC318E2717E7B
DA4097FCB8FCB635C4EBB9AFC179FA272A70FB2947504ADC434D49F59CF0EAA4
97DD0CEA876880C4118254A19147D1389963C41CFBA54891AEA08B8FC25115C2
B59B1671AE16E0B35E28093CB992A7033BDA2A7CC21BA34994E0C3A0CA90683D
EF9BD3C32C70B197770BCE78D444F6EDF9840A8B741F645B77E88B728581AA72
EC3A00921D30E42D3DAA179D9F9E250EEF7B24C163E19DF472705785EB671AD6
4DB34BB097A03D0724DC953E18E8C8355D66B32DF73B6BA4CDDEA30A72207FAF
08E24C5D0A20A385910CF5CC9590B7D4148353AFF93D541651CD027D5B23BE4F
C86005E73CF7581A15E9BE11CB03C9FDCFDE3700BDDAAED61CD52A78B112B125
251327BDEDBA3DD64AF14E96741AA7E4BD3F89C22A24DD1FACDDFAD852DE16B4
A1F2072361A0A5555AFBA86F55FF0EC9BF7AB97E7B9F607188F0F6601C0530ED
55BF9736395C609B315ACC4F49566EDF37EE3889DC577D0D2B21636857941F02
1E9230D76410B53F7265ACD13C35F7B6A54A96636EAAB676E726AF4E34A69D56
270FBBCD33071471AC139C90CE7F8D0F48F8C0C69BA1A62A0A6F8E820E4BDB99
A72B600770C9875AD74CAF3796D4BF759965C8EF576A9BB05860A2D2B44FB1EA
C6B0EA56507C3D9D415A20C6B7BC00B32B8BB7AFDDAB448ED4A8217BDC85C22C
316D1CFAF286E04ABE3DAFC8366BA8B6CEFAA4D884718B77CCE08150ABFCEBBD
16998E6C318682695703FE1869438603573F9FFDD42D68418354F33186D80B6D
7A870B23FD5C9CF7C9955943B18B42E6F1837C3A0EF5F644985D92F3FAD55DE0
C0D34B746ED5E34E366D8E134BB17BCA65ED5B18D17BFA2A57984F2C2E5939F7
FB4A9DC71432A820644050FDBE148EF116092C9B5ADD4C1F23B16A9440AD928F
7FA37C809BF155DC19A604D70AACC896AD7657F33F5224C40CD458A4B3635790
F09D4596C9C294575FCB8F8414B108827E34FD7908CA8ADBA381C429911A26FE
B72208FBFEDF21A33C1F67A31F3C4833A77961598487E20D6D949ACB940FEAA9
6ABEAE6C439F4B54C41F765EFA5EE78FB07D93F1814962D1A0D47069C4249C11
6E108EB52C0E099C177910FC737B6B73620E31AE0C1DF18D6350BEFCB2EF7EF4
0E27F47E6700BB0317287636E865797879DD5D15AB34DD71E85D47A0A481A4E0
A67486D9B37F43FBA51BA2D3F48A9951FDC4C3C0F7EB46E951CB165310999CC7
EC5EC7F4C60EE5F7DEF09F937900AC09FE38C6C4036844B3B7B9AE95CF8D4370
C3088B45CD2BC751170B446F3050D0F2C1946E002F45ACEB02A1F3509F9C21BD
C799C9E17957997FFB4B6422C78B0C123A11063C2F809B7B269365DD06DE1F22
BF970CC092260F6CDCAA06CF4A35372EF2F44BBB01E100766329AA4BC0B560CE
7F40FF9BCA096C74C304D6BEA11F2AFBB00EE7BF12E67B69CD328972C4007BA7
9140B9271255FC5F83B7D334A9BFC907C4DD469ABA39C0F36E2D6AC3CDD60909
BB657B1532BEF3F3F1D4E6EE4E5E53A203A454C882386FAD5FEDAB9AB4A87217
FA73BDB1813FECD3674380E0AC67FF77E5DB2C653A842181D51EEA36C7719C48
1237ABB43644C1F7C626A65288614A9B7F7EA7A0999B19BEE0F857E7FB9B5C77
48928BA8BFDFD36878E995DF9B374C852A63FB65165677B81A21C3F316C18524
91BD9D8D2A2CAE2F8B6A8DB26A82492F73B87EE731F666BB033EFE8CC47305D2
C1E0936B61F9214FC6C24EA2A5997A8A8EDC9CDFB3221CB7D62340BE92077C7B
D817276A1D121EEC0C13C64A4DC87955093A9E9154BEA213AD166EFCA4A21348
A2B6CCDED3501095C2D0B8BE7D80C9817B5C4EC9C854829D8431C78B89648E35
BF9DE33C4868597DCD4BE2C70052E451C166254B539E311CDD84555A6E2C4AAD
B3889DD84F63B69FFE143CE05C4165F12EBE53B2260D2913259A39BFF4456EC0
3A0C7E3848B1B2A24D523320E5D026D02B953BA54333BA5793AFB42DBAB81C3B
04680628523F9411A36BDD620103F2C4501185DED127016948AABB5E02D7DC46
13C87A1118D837C04544AD855E612A6C95325CDF1306E9784A19D787B55C070B
C7250F27760260DACE3F4E4556DFE7E60D2ABD369B016ACB4BE25E75799FAF56
EC87DF9163802B34F6636768C8E27A55DA443D76548B5B4E035BDA2F6EDE2E49
994DC65FB0871CA2252DA430FE5D9B3B766AD954B88D4B7CBA4F640CF53E3F87
0539549102C66B310B8D58D5501E4FAD498E6AD01368398F4C192CEA1EE95ABD
0FE8F14686B6679368268524733C7F74B4882EE1F9CE1B9A42C12EDEEC8D6E0F
FD95161CE6286D16C6B7179DC23AD373B3A9DBADDBEE439AB8F376852BEF0EF7
0CB9E631DD081FCF1520422C2387DB5D251F74058B743F69138F2B0EAF657C9C
2D12FE9C67EC61643E43DA42CD3B502C8190F3198E3ADE2E8D606CEAFB684D65
76C7A3D461E1127F233FA21BA2D3F48A9951FDFF2B53C8A72109029321858DCE
DCD76F100719583E0BD6B59E20CB160B6BC81E449D8348052346E156D7EF7AA6
005296B4F30F0E6BAECD2D23E5B2ADBEEF4498694C0884FB1A8416DF0B1F9ACF
04456AC1C00FEE373C229FB409E5C32C02F5C0A04070E182388DA6D8D4E80CB9
3876C19C8D31C92D8B3A3DDF6387E4D8CB0547756EFFD17592BBCDB97E8FCBB0
DA3D41D6C6A12FEB73131C530C8331B25749ED4768A496B35FAF813EDF8E12A8
1696C045
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463BC48438EFFC3124D2B687E0179001442
3B50EC14A43279E027E501524DE850160B6B644BD30460335D0C09F10557A475
D84C286D85B64D265113BBEE89C451BB69C75487F8602705B834E9B0399ED401
4521FAC8D9E2AA0F906E6097540C5C81A8CF53AD642A99FB4F329405E139D009
971E20D13D14FBDCF1824EDC1DF652D9433B7FCAC6F300093EBC766596B2CC9E
DD9422F77B27BE6D26D24184CCE5D9186C5A8FF1C50926FEA57A14EFF9B92161
489D7CB2C290370E48A40AF2361F12D59818588632C21480FDB6BD9BBA57D9F4
8294FEC2D22B0C60411849BC89C842C7AA5E4FB15C1942EB897E4DED8D7E1362
E0F473FC9425592E2E45B8C16834E8479E68779E5A24BB82B024E2065EA0CAA4
C62509A49BD69E7E6736A1BD7072A987295B3F424A673DB0BFCDFF1823F3A9A8
0F1F7E8F7CA7B20F254AEFBBA0F344D7EABE7118F71AC742574049DCA75A193D
C6A2967BC611E1A0E232A0FF57D067A939EF67645723D143A8D4D74D8FE6C0F7
7B08D4232C67806307127625D2616C2571B6413523BE590AF5861B20E7699BC0
69A8BE8F827227EFB37969C2356F93886272C38BB5ABDAB00E5722E22BCF382B
F892C767894C021B481165B32528BF3209DA0DF713EF4751FBBE4D3BA3A9D81A
503AA8244A272C16CAEF6B64CDC70B85BFAAE1BEC4ECFEB38C54549BF4C27D2C
9F792B326AB6D012B6B784F740B8E0B360808C984DEC73EF5731C96C3233AC20
FADB3505BE2B8C29DB3630B72D102ADFE5B8BA81D3DE3CD424E81DD04D75FD39
74031EB23AAE56CA47762C1A267CFB783BD889067DE6EDFAEA75676983CED6BF
6BF8BCB7776A6020E0474D96EE77A6786D5C6A106A315138CFA112E05B771B26
5EABEE61FDC9AB160791E0E8581E4D058AAC65946F883D36927E05012954EC22
69DAAC2BA95CA0545BC92964A0DD04E50F5C82B2BB5E8F3A073EDCBB6CD5E7C8
C131C634F4A6767064EA4E5F469E48F5AD2885076AFE12E1147CC2855C94FCC0
2CC2B29CC5E82788C070EBF5E28B2574EEE5E24784012053B3D0781482282E4D
DF67D68214B348BA511D8FD2695286EBB864B0ABE9386FC4E753433995E972D3
E9BBCA720EC558E7E1939716F051C9F383A297631E09D739FF5F74224027D20A
81AB677E2C1750E02DCF8A09F8DA0EFAC7EF17D24EECC5D8E299FFAB91B21E40
DF20003FC12C96E66D061CCAE96FC89F2006746A5C082F958963CFACB7EECA80
5A8ECC05105A430DD247AF32CD1E6FB3E096E405FBA4E1DEBD8BA28DD378FF72
298CA4CF175198F196CF2AD3F92F34EFA43C454B12960451CEEB882BC04DAD2C
AB9950E129C5526F99362C7693B01E7ECF132C62BDF74FFF67CDF6788877A310
4070C223170140A7516D83EA6D23AD76E86253A3295C9651FA46DF61518768B7
67592943F362EB36B0F5750E2F2E622AC7CEE39A99198E67DECC469098BD2EB4
AC546B4F1D92904C61C4FEF184AC43B9BA3146C0D5A9EDFE8AB621EDD2C36194
1C0E9C465412B7662C403273DADCBAB64CDE7FB9E0C6DAF29FAC0342BC6B0B88
4D6DA5B95B9F1D0202567080297D7EA536BC895608AB13D7E149FA176EE68606
F0B35312506C02F1A6D83426C00EDFF20384F08EE78F508778BDDF1775278056
0921CBE040A2AEFCBE4AC82DAFEEF86EB672AB35E72FE16213BC277896396056
7849E1F6FAA1EA9A2CCCDA7CF82CB2855CF7DFD25D8B7DEF7C80370B05AA7FED
4B8B1946C7CAEE37D8B823953AA248937D5B58CA143A4757421323238C5653A3
BF9F28CABDCE69C3EF0315D9CB1D677979EF1B4E96BD0CD5578D06CD0CB12D5D
3E73DF2756AB6AB85A6184278D32B646938E893FC874E4C934D42A9189737343
ACE032D575B68981A230B10586ABEB987F717E9CCBD3E4A49E374C01C81590D3
51B7AC1FC6D95F9AE766E2E43AA7FF6CC7078948AFD6443E6E82EE2C091C63C5
562701B1DB14A6EECC6AF557FD5CE12A41C74ED56599CA1B9826D83999E41A90
3385BB5355C60DCA734813394B952CB7086416B3EC91A7AE07F5B5F5F985C022
93ABD8ED16FA05369A1877714350E862572B396A38AD9F81F8AC76710B9AD952
5AAC8C7B6AD109C1427464B393C38077C986172D4CE9D17E92629DEC28C9D57C
F7AD5B0FF6B36C94198EA18C0391A20C054CB5A041C9C7C90232A3805A1ABAE6
DE4805C2B5578C54B16F857E4361602857C863C4A0CD39FC3CFD65308FCD7573
4240E4B00DC0E60C98FEC6C11C49CBE7C4DA24FE472415598E1470196F65230F
7B80B54EBAE48FDBB31251C60FDC2D95B554E10166E063832CE329E0CE7C909C
106FFC54EFC06F76C5128203F99E12BDCBD841B4822F2DB69C1C1CE08076D532
971CCFE02C51AB0637C908BFB86D50BFE49EDEF3B19FCE4C083C74AE06227B0B
442619B98BB16D202D91F8A96147DF44E87C3D72F09DF273B603C0DC73B10236
8EB717503C81BB65059F25CC80E5EEB5A195839275C2552C5EFDDDA1551B911E
6504BA3557D60F4C760F64E293F3C5263756C50AB1D68E527DFEC6C96CF09019
822C2A7402CC77A43DCD74EE30AE2C787714B977DF80B7FAEEBCCBA265C14384
FC5F88DC7ABF2F42F1418BDFAB8210BA22E313317E0FC74E1ACD6579A7DA0CD1
2FFEB765E1344917717160EE6EA3E6E8FB3190B7E1BF4C2BD3DC8A87759EEF29
A005231D03B51D3B5ED98C6D02341ECB3E84E3769999035BFF29D6477B2C3EF7
CAB079820BDC7B5CBE2DF9CA920E1C9E27FE6C9D4D841359D93CC99B135710C6
FB48E552AFB2C2BC452857FBFD39547953392EEC50FDDCD73F2E287FE61B3AC6
E94EF7B3A3B57E9E302CF6A3C38A3E255C3C92048596DE9071855C02E5C46FE1
CDB4CDE6CEADA8F6FF190CDFD588A74D9D4FC37535E94C1CD5D8613BBE264A99
0FE96BC106975A61A8C62BA0009E745C741E8C218D4B105752CFDE4500CE6EDB
49CBA47F93F02016781F3D137682A51B3B9B7E95C62854B3D276E1E1E941BB44
E0E7E81CDEC1DBA0B6435FB45B1CBFF4A896E506B5C8E5DC1119059BFA363C2B
1D8B2B0F19CD8AA5A037DFBE89F3997A1C048F31A863DFF7A42A5BE4B37B2D8D
E2616B0771CA0777ACDBF2C367E78EDD8D8A72C5ECDD4F816350ADB1D50103DB
8BE196CD7D4B7911EF69CBB94CA709090AE8F4299079A03B64A0D4AA1C847F63
CA6504F528CE9166896553F55980CB6964BF389B9C963FC4DC2B781FD8ABB585
A81B7BAEC84D3E7E36CD16CF26E00CD63BCC202729FD3E48D7EC7516E263C79D
6A97268DA46A60422A96281CB22A04A78EF3F2DC126FF7A05EAE5FC18D00E814
009234E2A36EFBD854F868BC9301D3381B7EDEB0675981A56FA092FFD7E0ED86
A61279D5420B240ED2B4513467DD2E9F214E625FA0CD4248B15F9BE8F44E70FF
842306ACCF65C0AC9673859DB9C3A23ED6BA76C607F28E5C144BDD57981F1436
8C4447A729333C203C1D6F6884A5D19AE93D67F52670BB3F42659B570FFE82B8
EAD68AC55C6313424B8CF1189E3C144AE34CA73B1499B395127BF2453FB7F04A
266A95B4A298B9084BBC0CB1E5DE954EE5ED85BF929E901E4900B75B56BCA5D8
99F157DE02D11CB4A6025A8F4BF2859F9E7B5CB2DD17ECA3E12D5781DABB3BB5
D9FFF763249BFACA0785AA219F85DC4E78C139FF3A8FB800120E72412526349C
5B4D3FE5690BF4E925AB2CB615FFD2192CA8295936A18B42F96BE5854A7003C2
8E787C5FA2A0EBCC7E875A641694AAFFBAFD9547DFBC80D4A43DF7E98BA78C2B
5260F4F6C45F6D8A7357B7C84B6895E08B1D6D36E8D75702D54C3F964171E704
C8F7037F4365FF87A203D8BE92B1099FB7E69D74953EB638FA19404C84E3B4D5
A08D6BDB0DB577DDBD9975FF094F8E0C13925DF35735D8223C8D9FC72161E60F
C9EC35392D8B73DACD63E3C9C2C1010E40CBCE27BD0E7329B9A6881B9F5C4286
834B112A764FB4B7694BE5BA08D6CA0E890CF427CBFB8EDA810796E92F1FFB71
67F0C31B435308E991B8DBF6D872B52F3849F14FD66B01ACD5298EC53D50A355
4A7D613A9027C759CE5E87C06DF5D944BD139F7D3911F48E1B9073508F3EF103
EDE13D7AFA1E0A7F252FCB07495C439C635EF4F0F627F510735CE288E0356376
454BAEAC40D59B99666C5400F991D2AF4F7AA2BF1B70E7B56B7B7B2D2AB4CB7D
1A8506445CE7666928448CD9A726B8BA40FABAD3601A6D47598567AB3A78CB9B
92082F35C9A5479B2413EBAFA55C359B93342F933C253EF76BB8B0BDE17F6910
8832D264A03B2A7EFDE7EECD25A660FBBC901A3292A26491677ED62026753B90
6AF3438BC92C9FE125FDE7ABD1EBE059AC24F8F60EC91E95AAE9951FBE96C945
8C34069D518ACE7373CDC02491F4DC4BB55E4D3B81E91C91BD85281955FBBF17
4FAAC6A9A1FEAC82A8998C0204D4F954529D2395D6191F328A08747E3252294D
52F199F9C7094BF0EAD8152BF747BBDAE41B218DD1D5EA6436A0A97BDBDCB93E
846E4EA0965098C3F02E884D87292FB69D9C2607B569CE5593207C521FD41049
C2E31ABD0DF30335F336F2290685B4781DA8DC6FF1D6763992751A0E8DF77993
68A998E723CFB6120E12F1353AF47A27B5364FEDC2A8FE74059B919238153E7C
704AFE2F12CE11447DF42E19672C2B8A207D3DC118F66D9FB12FD026E09A8A4E
446F2F5B45FF242DA4932B973139F328E7E92823B691443948189AAFAD5289F9
45F5A49AAA9B30BC5BA8CD465FC3CC1CC6196EE92AAE616EC6B75541463990EE
BC4C700EACA0F0D6755D8F7F5A6F1A98D25E52AB95F7EB44D041069391B50D62
C16CD6D294D8126EEE532651E24E1BDF3BEDB1289D0B7B0CD79F4922988B4F4F
1CA73FA3321A100054E6989D01483F63D07AEA271F903D79529AB872DA6D94BC
E9E2F06F4956D602E2679B1C529650BECBCCDAF2561DD91BE721DCD259B8B6A5
7808AFFB20533677EE3C3BBE06FC429FE06F91675A64A01BEC7095658B8482C9
507EC81C13B34395A2373424D672A7BAF06D315060ED2A363F1B6093A3B08527
092A06CB2C48D616A6F3B869EFB7B5881601F945629CBE069993F907B6FAD18D
558302539DB54C277C79C43D620F05FB59BFA70424115A506CC34416B67D9C8E
FCE1A74CC84AB976808C7E84219D886EF89FB209922BB8C0C4B41A5A85CA2189
F9BE6387A1990B92E41989BF31D8D8DF768295FD5FD9FA9C041FA0CD055CEDFA
77945AB364708B48E18261B66526C4D918FB2DF43C1FD68B82AFE916BA225A6A
F130B4BDE103308C7899C40F502CB45E283972604E3D5CA2990883F53F8CF6F2
67B35795C7626A32B6E41849E7966B791293D5BEC043B961C52F408C0C4DDE1A
A36C33232F072C5A99A72019D29CB845F00A177EAD188847E28887E123502063
A45F21700DDFD4B01D3434F436AA908E5424456600452041A1A9231320B310E5
2436B6DAD70853D9D0DC4FDDA22E952BEA4F903E460FB979B8746EDD14B7599A
B3DD7C41390472B4DD3B46EC12C8B44402479FB1500B83AE88D7484652B913CE
7D7303EAB357CA18B18A226295DB9326E60D551DD41CD7100C55B68F8E836799
1AA96D5E3A1E9C0661D553F8145113F1090DE47BFAF06BB94509696078D4FBB5
81F15E81BCBEFF3C10003F7FDF6FA87CD5CCD5C17F4F7E32575DBCD03AE8F29C
792E455F8299865514FF657475174496291DD620A850DCD3D038CA7CF21FD77C
E4D534338B432782134A57064B3E173C14293A0493FDE9A039E4D0FDFB0CC786
5CC44BA6A23FE3F11DFCEF8EF834DCA9B42F2072646F02CA50925B28409AC76B
F244F05FA35E59C55559EEE8562449642CC9192F2438CE86DA440355849005EF
C76BF40414D2ECA99247C2765212F426E5F9268B079D21A567377943EAA6F260
2229A68C7C528B4DFA42E7A82F8C4420F8F65D36796E3DC8ADAF8B55DDB9BA63
708AD49CF0FB565278D42CCBBF7DDD11D60912E3FEB897524DC2D5C51DCFE828
10E58C1D9E7C4F6BF042813561D3B2C8A95292A77C43412CFAE124FF1367E897
09CA7AAA49F414648CBB392968D49AF1832A085282DC00C4C2C6D378D4229CDD
45687E254EF4CDA93D7E88EACB693324FC5F1546AED85AFFC72180880E1E2E19
26AFBA028EC1A5516C0129F703E401216D56678689754F0DF1E72F25AAF41A24
D9B74A0FE9BAF8DF5F77D27542FE47B7F5F1683FFB8FC5DCBACDCBA80A34D2BF
741863A5FEB0F47335CAEFB73A9DE9BF792C93650CE79C78EB07A3A21124A0C6
E82F72969C743355B56A295964903BF4C50C46716F3407EE631D63A86DCD0DCC
4AFE9C17940FB4805A4BBA938AF1E6B96E33BC1D8685C4C02B8DB9809D89D3E7
013ADF94040B11CB6F6EC18E8409C098D604B3724DBE89E3619EE115236C5AC6
A5A7509F4F3E4D5E1147E7B09FD2CD48E84E619A84577E90EE8644A263233860
5C1F9131277E89F8929C0B5A7E721D869B771EDDB9B0035559FC7D7195F5E267
6A7EF904B019584323BD2B3982F33CE9D5C4636DD1988396DF3B2EF0119687CC
FB2E29F9FA78CDB32A00936EB2ACAA73CC92F9FE47D8F5D5CA41BAF982AF5C88
B3F7DE0CB37230AE9012BE056B5C7EA3460ED2396A99D36C8F459F8B6E3C2091
0E860E44D38EC317DF7821859BB191D54F6AC85481605803B58AD67848333A62
D863C76C1E012AEF8E616A04A17B2F24004D0B8832FF412D48010C4FCC3A55A3
BCC6033C9B4B55D03B69560D2DC80EA29C1FC979A3D347ED55A903B977A90A84
E779F064779CE4636B9FBCB78FE0811750B0EAA7CAE26B5B2C69879B23830CC6
9D4EA369AC7BF12DF95FCB09D2738DD5C07DE84DCC426C6B0F849F4381E8A3D3
8617E887B5398776E6126BF7EEFAC30CD882C2D90B88390AB7712AC342ED5688
41B494D3FE7CF34A0E25EFB2AD758806B7B3C79218A58CAA3AB1B6C57368F12A
AB5C6F0F4926CCB9B73A884784AC1AFB3B469C442FC8CE3B5DC9933187DF10AE
67595EEA496242B93D484452E812A81034B1E73D0D3D6321BD290F8FDB75D721
BB7355B047D2AE0F230B387EAB7B9174B1D410EAEFECDE6AD4B3FE60E21F1F6C
D632359A87945386A6C3633FD2EB348896CA8A550DD38D53B5A106F63E9DAA0A
86475B9DEAAB1B74EEB7B908ADA0BBB07672721F6728007606C5484FB0E9D7D9
396DEAE2CA199594CF093FB85F2E70722BCCE023F677960CC7C971E6053B0068
BC64ED0654AA5F2DE8DF3B36DB44DA4632948119A6D039167D141A37A0625C65
5CE74CDDC327115D75F7241681D3EAA0C847104E28AAF3D6F61D6AF61FC56EAD
1E77583082116BE50E0CF3D9C7131B99471BD3FD5D5916436F8B1DA61CB57C36
4C368CAB648CCB5684F550F1AA7131AE767E43679082AC5289450CF8F81F6172
DED1D72095E80C23E59BB67743F85662BBFE2ADE76BAB072FE195927C355DCAE
C26009511DD89B6438E1202846957771880A8BC9E51472B6794D2A3241048B24
F370575C02F0ECD7A5B0DFF4D981D110DE4E01D06AE4D94725B4AAE22A971E6D
646988D3DF141089859317FB58DA05268EF3FC17CE8E7879B21FDC78BAB35A74
6BCB14CDC2D7EEE6CBA7573B81101664A1912F7BEAA6E5768418A0F170A83B3F
3A77C98C79428B15E7E2E15AC18BEA99CBE99D3BA4CBCC2D204B1F39C340FEA2
FA6F047FBECFFF60714F53EFEA91A006F7385DB7CB84BDEA1B9DFC69824CA19F
0FFA206D466F634410D717C02BAE8CF444754A0DA48D4A2A714674FC362D47F9
7480DAA6E7369D252F76653C3C2637C3A20A51E31F30559DDDD075A82E9483EC
5B3A28E5796142EB53294C36C60F1F37888D680CEA0E8D59C237AE7F695A1CB2
6D44DFA09579776A494A7FE2FF57B1122DB4B1828F1D2DC61E72C94C2921BA5E
75646CA5C334C577F7894D9C9D3B36D44BD7D1EEB8100D89ED3F9E648313F8E5
3D8D6DE8EC24F03B8D69126EB5CBE58F264DA2AB05FB4C32D55B7369C067119F
C7C6A6390D902876C723CF71E22B705C00D38005C77076CE57B54689878D3BDF
8E8A01FA27EFE90B6CB6EB8986CDE165FC35B36115F00A374A286EB44FE9FC19
EE4152E575DB39DAF365EB6EF863A8103FC84299443BCBA9770319B732CC695D
238F69A4CE6910A0FD1A940334683679B065EDD1594A96B28C7AB1391137BDB6
7B3EC68B932CED8C9C5F1518EBA0C337251B70DFD9581040ED6CCD908F1A8355
BD4050447885428023ECBFE418DC309986167F2CD7B1BBDE24F232295C8A4103
362D39ACB5FA50D7CE8D35A2A3D36643AA9C2D6E71B5DBB3B5F0AC3921A00341
B8723A43D9986A42822A5519988E8385991E269B55C5F58430CF799A6CC20F6E
5C16C4AB4F89AE79A8AE90418CCF08DBA6CB32DF971A1FA5FF71767092CE5DC4
5E98DFD3D28D78BA09D5CE1DDF16CC175E5AB2826C7414E573C039463C85D6D8
0D2E3F6E3D9B0F29434DB5A3A2914B445B822AEFB5E3B6C185648120398E67E3
87DA30BB624B52A5AA86EE07E447D8FED8BFDB270079017BF3E2BCE859A035DF
08003075C5109F898D7ECDC462377AFCC93E3811030C29E471B39B289B7E88A9
EB85A91F2DE7151445216C26286A1459620A95758C87D68C62C39198B3D2AC24
C035665DD98E26606CB1A3A8C57A842D4B1597CDC6A5E352C6081C74192958E0
C6C10CC3ED3EE059A03B1A1D2AAEC2F0EB03E3ECB8FCE3AE95DB1854F135C2B6
9D08DFBF0C82E24B533FB48A6591AC9EFADB7A25F042D94D1BD602F5C7C276F7
365F68D0F6EB5E28937B5C0580B097D3E5B19628F781B5AA966F09BC62E0B00A
93FCF87163199C3E19E8142BCBD2CA68C9CD013DF9AA0CEF47F9E91C6D804F5C
E9187A2A6FE2808F1D8B26E038E11B8F39F3624BFAB0758A0ECA72C8D55D4D11
3BDE26715C0C9987FA98D233971B1CE7F0BB96533AF9DC509D70F4F1B51A1BE9
9EDABFDB1CAFF5FB098493A31B2A8007E993F627B683B1484E2A04A2F2C6DE73
5F488960F10456C6FA92367F53E56DCF809106075DDC1D1F4D39C1DD6D89CC95
01CD47849901838D0A12D48CB1015F0C6C6878737FA40336D4C1C164BC7D3CCB
E333CC60A6A8F2BFDB043ADC0B94FA3370BBFF06F5AD5700A7F5DDAD6266E74B
BAD5754ADF5D302047F0085A1BDB04A65CBB6605D4D72E11338D87D5B0283A43
0D4976695D2851ADFE75F0E8AAEAF174FD8B2D51B04E24C3B0C1E808A67F8C12
72B480A6159DAF45EC3005CBC43BCE9B25CD64E26B57F1DE47D6F9DAD18BE661
7E1D2704622AA4BA96347B69E844752017BD93018663FF1616783E6083A9639E
040D0976F90B757C56EA776AC18533024C4A3E18583FB08922F007FB1F6127A9
A61CC56FFEEFE9BF03AF9D84DD2AB94847F33A3AB3757D2C8ADFA3D454E0B20F
41B614C43FA93B3E08BA4555A2A078981BC270353FBA7342D32F498E3B684ECD
4FF429B5CCE7E07337D836D5FDBC9A2187E066ECAB8760E075766193226DF92F
C61205659ABBAFA152FC4FB95130181253E90EEDE1268161B9A03DDC599779DF
4200CFA4CE37738023D1E9C94E39C0092C5C0128B7C3E2C53CFAC71CF2763EF2
6955F5809F8EF09E599776ACAB17B23C61D4F14E8B17C729E71CC80DB677FB3B
3C60B2B9A6BE505717110A4E7C5262D53910DE1DA605EF5270817751DB9AB4EF
1825D0058E0576018C746D89AA021DB84AC9AAC072FF6DD56F0F490F01A0BE62
97D4A5DDEAF75C20438DB157D88E49686B612973A7285571095566DBB3F3274B
AB4EF17508A07E819E01C68551DA940B4655C87DB62F595D634D4D311EEFAD3F
82143999DD68E0DAE594B2460FB455222C04AA092C76817C62B6D9BD1D20BE0A
13B49A57FA350664D6021078EE1EBFBDBE5AEE9EFAB353F0FA404657430F1CEC
53881DF1B3457BD811E612864CB442931D89A2D64E9CEFFBF0E3792A219D478D
933F6AFEEAFE31C8A721C2D46AA00C10681BA9970D09F1E06F7AC4260AD77DB0
05D835B04DC328500DBE2E66A5743925A21FCCC869421A47ED6C962398973C14
E57C9F203C61B9968C30DA069C1E3F32097ED802D6978B315F723A7E82E272E7
ECE7C5D16BDDC66E655F5449BD945945A274062AF9E593F59B62F6797EA93A7B
D824F3261F593EFE336A8A2387673698176EABF96CC3872D63DFECB85A84440C
8EFAC91364577C40A38C7297AEEE5922D8DFDA2CE6FFE44DE94E1DA9B6B19795
C0380003CBE1C9EB4A1C3EF1AEE526A8DF6A1C9D713A21513999FF7B6DE166FF
F2030A878EF210C9F13AF4179E8636E3320AB8B7EF6833719A9CC6065A715666
F2536C2689510111187470ACBE69887A94B7F9D713D871CDA794E75B9C421F16
C4F67E592883E27330C680897A4E9E1D9912318944D60F2CFDC80F258A004355
880E005F90352A99354C678C24C86AF8AFC573994F72CD257943F634877F46E5
1FAF51D64FD328CEEA4397ABDCB99E944E3EA4D967D303DB82D71F0F6A8AA683
05A375CB7CB7FA0F2E385A5FBFE5409303946BA6C76D2D249929BA4C2D2B0E71
56311C2A49B3FEAD8F7E4661FB40BB43C20437361ECCC811521394CFF356A346
D72C33119FB24101B7B07803420B7B650098DCE624590821594009AD79362334
38D167D50BC2A17A710E7D0449064DCA21AFE8B6E0405906F3BF1EB3BD3068CD
DB79E37D8DFBCD384EF0AF52CD11E9046EC2F8BDDAF6B160F46A3AB1A2B76716
D5501429013397451F740DFC426C1F77FEFEA46FE97E3B7A047D610B380A1771
FE257513A7C79554BB91ABB29B744C4F2B9F0BEAD95578F38607A8CC2C9BF1B7
9F5F59C52131F7B13431F202E298D8D935AC78DB6214C4AE2596BB7829355CCD
99405A62F118E48E3671A73269C5F5D8E45C9F0911E46238B7D84BC2289BCB1F
6B48355460BE4E0C5D8722A3EB99F0CB470FF87CC8C654AD0EC6436BFE16107E
1333107A831FBE6AA13EF41738722D79F5F76FDF8CD4FED36D7A98118149D28F
E29E46A3635D2A3A46DBEEB7F1E4E68780738162B808A2B823B50C2E35FB75C1
D695435095F169D0E9629702D6E1CB4CFF99B362C8CABECC31C75F34620B610F
6ACC3D39786A485FF6F5431D261D7F78E67A7A1B6DA0D1046C29993E201FF083
4204478A326E376D1DD27EF2C97A4FA42D8BE0B0AF9AD8DC26612969A3FBBEDC
432A6A908FABA833977E80DA32367504A21FA8523C22A8539EFD6522060C590E
9C0493C06C7B364E6040B5C03B84B18001D317735AC59F5372C56774DE011101
AADF11E591E92E88BF0ED0F700D82CF6B4CC5CF5EBF10D878D2195A7C1B452B3
B5D26AF36A8C3D48784D0F5C4FF16F651DBBADB4BB9B1F9346D6B558E7E6DDBC
619AD62B5341E17345943FA2E70D960EFA10729B1D61D6446FA91332427F3629
6AE01E92869339BC980BE1D0DAF9518216587A3187A48E406774C3233BF03977
F221879D5A15878E7A6DC37897B245BC4F70F16FCC87665BA6324E87C47D9A01
12B91E66F516835BDCCC120A1C7E94C3A7B590146DD25D205744257EF34031F6
5D892B83A36CA9ADDB6C4C630C6276B6B5CEF8AF6159025F78650F732D4B23AD
08E64C715C91B12C4E9589955D2902D6196FF0291F148C75EDD764B1CD13DCA3
D38548037B77ADBBFB7C3C04B37E11E275D28B01B5DC8CDA54B2CC25CDBED7AE
81F985D95D7645B07424D3B97F535A9D9FB2987904F3753F844CB035D6F1FF72
F114B7A89C83885636D8089CC69C68D31E835C9CFF0F6DA1980B3F8CF19DB8FC
86A93A2665451078EEEF308076E26ADD688865B0D7D87DA690D2166764100EBE
124C474D2FD8E3648B1318F276C2D42B87CB213972FA50CBCC191D5DD107176E
6B7A2B8A687F527E0B679C0D5FE02E94AD2B23B013C972F91C02D588A6BDCA35
9670C756A6A8A7DF82C1709D96CDA8E33DF799D52A31AE80C1EC21F33B57A2B4
45F3E91086AAF31169E81E6FC513CB43E9BBFC53C48FD810499674659D360D22
B7528639CD64EC0891058622BC5881350665EBDE923039163C5EE5CC87321EB7
FF2291D18F79C15C1386DA1EA155BA8FA1DAF03C14275625A3F6532074099DBA
58D079527B1A21B5185A705D961DBBD1B88E8F0D29F534CE7B76A03531D77C38
FE461CD1901CB13F10F8C78AAE77D3EB72E76BEFE5892B7FBF324BFBE246CBE4
6FF64199038C006BC3C223CB83E348132F975CB2F95552C09D6D4E6117FAE8E3
767E432A07C1CCEEA3A72FB9C61A2326A84EA06C7171BB42D3852EB036C9D1DA
587F6981EC047542641483D46ED94627CAE8A8B786E94351AAF3048BB778F948
6EC7E70BEAEAB7BAE4E9CD6C11FFC55F17D9B362F0A04D8F2D59D2C83A9D5DE0
007A42CF2B117900550535899AAE85EA0C211AAB2B40E9B6B6208F00EF8BA7A8
A2DA13440142150E900F278ECA334E827C946DA7DA10C880DC3512AE57DCF67A
39EEF57345DC629D1A741BBC7A8D8A68E56578027AAEC7556499218AD2EDD564
0F536A5814956721BC8A23ABC7F03F53FA67418389DAE4BFE746C117DC40681F
F2F5AC81C4052A6DA2471AAE389FDDCEC695203ED6749AAA026213F7EDDA27F5
28ED4253FFCD73254C575C2BA6FFC0EF748D121BC5E8B631A6F0245F9CA61BD9
A65D85882739F09EFCA17272C884E796D45E89E2FF5D11D953574823F1177DD5
64B0A3BD5C5E11E9E11169203900870D327B4AF7D7860B271625F9330B435C50
0477D3D3808A3086FF66DEBEC526D49F1A125648810C42BEDE38BCA726FDD47B
309926866DE74E90221F337210AD1CEE59572AA4AE13C8625D0E808C21C2397B
4C58BCF635121388EA65C0522920FDDFE9775FBAA1495AC5A4D22A71A9D36C6C
5F0360225DC9B3278A2D92E5D4B29560B329B7EEA14BA7245B381E31318CAE73
055E8933224C0D7D9ED3651E5AECF3C4FD57B0891FBA2E3E9D57072444F9ACB2
CDBCAD65661B8051281772264664DF672C6E2301D500F3F4E0E2C88177A2D24B
9788A39FC8384088BDDFE8F8C1BA416E2EE54ED90FE1BC0752F147B55FAAF09C
B3499811142A33EA2F139D882A16DB39408EBDDDD6F3CB039ABF846C70074429
09449955D5936C91855961D494C786469BD2433F6C9DE9F7E99855642E502550
6EC2553339B77EAD8405A80F9AC4AAA0EB70FE0195BD21C10EE059AEA59E3DD1
20BDD648B3821564EE89D6B7E66DBF6D0EED70E76F48ABAB249E6F3119016CEE
F4FDC2AD1144AE3D753F90C4256916C49537FFC391A4C0FA8A25D3FE936D9CE5
97D3933634026E52627126179D4BB8797BD48EC2F26FAEB82DB21163A18452AF
AA4C7CC6945491CFCC16E1FB00CB3E4309947D413EF9F83C46B5C7C84D1044FB
39B23C36A528A414EB351212CEA0B5147297621405B9BD747B05F27EB0153216
89B724081BFDD86B570A3C3AAF845D3FC725478E52958553258CFDBD038A9DF3
6A432D473EFDAFA111CCEC2A7FC4B362B32A001779978EA82BC6F705D127AC42
833CB5E589A7094A70B884ED8DD301AAA69044E5FDB84EAC3AC810312C92BC32
60C24AC792D8F6B7A0D09A51EBF66192E45DF148E6052B48B370941722149FF0
C03F83193915AE984D5ADE04340CB71315D89AB41CC52D9414E162165753F8C5
F0D70F785CE5B3A056954C12692ACAE9C6921FF4BD9E416BCE4E9348EC0728E6
A02E2FC0E48D6696C5FDAEBA77CBD22D7B4B27363BDFF3D7A86AA60FAD2B1A96
973910FBC3128D943260F64F552D73A9682D9FFE9F0BA997496DC71884CF3217
50A8A78ECD8DD01B02089FEE035D9220563C53BBDA5213C97AEFDF291012C0CB
1E5C632D2CEDEC266F9B48B0EDE8D4E559699D6BAF87BE11338E64CD45B80656
513B68E1A5D70DE3CCF1441A582B1F2A374CEB258A9387D27CEE2519E35AF1F1
AC77B14600D44942C921A66F6B82B924A993C2C249730EAA51CD8BDB8B315050
1D24D3103E418B61A5136436075EC7BE7021B965D9F8DF1D776B4D7409465987
A5373639E407F8C189F118468AA276CB98E8C788802CDE7A9EFF1860B7CE1C5D
843E7EC19D0CDC5C02852CDC3E5F92AC41273823BEED4FF4F847999C92268A12
3436EEC86304BC0C6248CE04AC0CB76ED8BD52BABEACCD312E57725C94439899
100BF2EB7CEAB08B1D71165A80D78DD231884C767823C814B0F6A17D08EC8D46
871D78900B7D3470468404E5E40004A63C1B197C2236885F6C48E629115BFF3B
06FBCF73288CF8B7864B0B1631F5E25884D4A5F151634B1E2E8CCE7A2DE9C9FA
BF6B057AC2B73D39B61BDE214A7CAFB6821CF3A17955473AC60B538E6870E47F
46E064F2400D954A2358525662CF4B44FD2ADD2D15A937B92EEB0F04CC3867C7
A4A3F54932CB2188EBD4516446249C49BF2A8D802001B960A5572A15D761F6A0
8820368EBD30F0147A00999E577179E988DF71E56B0765A9170E6F04507915B8
C7472956E3AA363EB23D25847A8DC5632DF2CCDF87F9A1FBCEACF4063F1B86C7
ADF866D2C71D0FF3F147BA68A28FCBB22C52EC6DFBFE7CA1716B4DC3D868BD67
B50C1A7B4CED661B755EA4FB5278F8D8E426BA3F71CCA6D96112F27F9B4CDC7D
3131F78743632FC93280B519C58598CEB5F5943F6FB200B26355BA6A3D109CE9
9B7C90962C2EBEE3E08170FC79529758F1E53F69697FB86DCD809E908A3F5F4C
8243CC984E9CEFD88CF33827F2F0A2728A20D7C15F478031370F4CF7CCB7F75A
4831EB93905F3963C38999CC66211C85BFB2C8E2C01C21310E04AB449B3EF312
FA9CD7DCCD9BC9F834838D12303DF94E1E4C9DBE11B89FCDA72A7260DB07AA75
B998D5F8A8A886456813D2808A7D97D7181F5B6619C0D06BDDA8BC7D154B007A
7A7F40917DD9C8951450625375B7DBC4108C77005543BF04F39269FE99174BC5
DFF14C6D2A2966229B1E6333C481F44EB1C650D27F256C94C92E508CCE65844C
A91CBF1AD981BB12C62BB25988B99274C122A9A420A5D3AC29B99860E1F9B033
47172979F9CACB824AEF86669002FF17A28BF09B926DFDE5624A81F036D2DB90
3093CE14E41D9B511356F7206F778A3AB8C942374CF7439B0BC8AF1521B567D4
93BE0D50BABCDEFB31CB4F828A88AFCF9A1DE8D2DDC8308CE6C77B9C220B9FE0
4705F739C1F064D7C1FF52CAF40F2DADDE4946A891C50EFC1451AD9EE26F615D
AAAC5C42EEB3809CC6DDBDDE98BA208C6B5F698568A4729BABE12EE8E4FC736D
562FE13434A33EDE5EFAF465E9CDF77261DF0F9FB388720D3359C53BBE8D2800
1CC7E51A1A9CD9220AE366C07D82E5D6FEC418E140C8D2144A6352CFA02028B3
ACCEB77D7A44C8215D112EB926BB49170B6262F9728D06E98B59C652D3828158
DF9F8E1CD114820F1DA9959B4AC8B883057021D0CB38141DCB3B94A5B80FE02A
95A1C90A66705DCF682DAC566FB309049C112144EC4E2610439333A7A5FE792C
FCE4E73784530394CF2CD6F1675F4968CDA95B7CE4DA996C3B0574563DAB6D34
81A92A21893A4AB3B8D15AA5BA6A227DFBB46857BB9A16AF760E4685E270FDF1
7C4142C4C270B235A5C1E42FEEA9D44E93FB6741C6F5950A08516D5E9C423AB4
551D830CABE4026CBEF01B8A749FDB878B20B522D83B2A491B40D762A7D3C7F8
2F243B26BB23F4EF8C5DF306FEBE4E371C8735921BF807A0E689D39EAD713ACF
E41B41A3342201951747803ABCD4B56C2C541A73FCEC46E8B98366D48357D794
A9BE1254A4967552D54A4D11603FC84F0F4D8E761BD28343ABA62F6E25D5A89D
61700BDA38E755DDF36B989F4153C30F222BCABFE47946B8675DDF315EB24ADA
B074A3D4DB1B565FC95CDA9E147ABF9EE92FD22214120B3EAE61BBE302367711
CD3C75BBE9D239FA19715DB8CC4707E7608AD3639F2EDE93E02B85ACE4D3D8C9
678B49D02A8B08C084F4EFE31A1CDF1EE958EBBF7392C4F889E5C05D9251E4C1
77B02BFC199714C36295BFCB52745F62E49D5B10004B016D0A270C33387D834C
9FB09BBCE84CBE2DC9E356FF4F02F3C76002CB8A24F5A4CFADC0E9D88F831912
EF04F6DF305EA71ACEF18EB591085AE1C90B43731A2BBF6A9600D1EB6C121C3D
C78F38B4ABAE2415DB94040DF4BA664CB6F8C1A94927B414C555CDAC0ACC7D51
E06974D5A50800AB9AF898DB4E24FD4C7FDEC80ADAF88BCFDF1D312FC0FC8D24
64E53A1D2A94FD309422ADD3AC14D7B300C3ACCC97A6174C98B8D42632E93BC4
B303251FE8E40A43C4887B70CA57D99AACEC5C3FFCA20027EC1E9201C150A453
648D9B890D06898225787938EAE9C8E0A1A87DD891ABCE14FBAD957DEB2F2FCD
09F557A0CD633EAAC9C7D9D505235BDF4539087874ABD6D7E4D436199C2CA836
D16639A22CA6887654D6AA7EAD0E722ADDAE3DCEFCDA44CCC8A4A790BC2AA1F7
A648A4F8749DEC5D20DA9957ED97BD280295B1284AFF3E0D1F4916997332734D
DEB4C1D21905A51633DA3B1254C9B1798D8438BEE08123DF0D77A597EB55739E
0090F0E7A6471FB04D3E55FE40CC9EA6FD07F92016E5F119F787A0E816C8B955
397CA5E65B350B64E64B0B1AE816339720D2201A6D64026838D9470F4AD62F98
64C26BED0A6D3A9F608E2C584CF450C87F9C5FF72B78BD3F70ABACB0D9F9FDD8
2482CD5EEB26C8B0C004C4192E347BD9EAF863663526D5A15746D48CFD2E3046
4D9A8201B9D91894F099E1594CD9A3A37F9EF93397BF374E1F07FCC797C7D8D8
CAC7C20B3DEA33DEA9212CAFC0601C57F5B7B171CB6A504566D178791B028167
B2C4F7470552BE8F0606B7702C624247538861932A3C08C14A5ADF2D88CB239F
E3B986FD711571296110C713DE93EB131A90E175EBD3DF59A1EDEEB56054AF03
D3F2EF4542C2565214A84FB5C4DA67EA5F1ADBFA3174A5346EC492016EBB0908
49B1A0AD04D569A7C2DF7572D8FCF034BF90A9C4069FBB396B5B379A901B7C9F
211C0C1ED6C4E152F6AA6FF2E0D09ED1ECCCA18A03DFE54C2CE894ECC5745581
0945B3E6829D05D468EB2853A5CD82E52BCCBC995CA5FE986AFAB28FBA9BC8C0
3C3F21F9EFBA2E0DCB7888C10390918BEFFFDE230596FBB1AE3E72F4BE8B8287
FABDCBDAA4ED5BCF910988EE7DBB0ECD931487C51977
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585E9EEC4FBBE9CE6AE8532B2CD4
101F1E68B19CC8756AD1987CCFF2302525BA8389489E8AD29C974C5A18DA8F05
5671EBB8954C3A90EE42B2AFCC9D2F52165A0DF06D6A365FB88544455AA87281
8C323EC616CEC04738328542CDE8B0B5BF7C93F1B7E133F3A0518EF8DE086451
334163D1D60B17DA2A733E28DB0DFF1CC06FCE2B0B6A6F13323FAE6EAAC2E140
289A9902475E6CE9C732FFD0344F1C8772BE74E0705D0904CE66DDE2A0FBDFFA
E7A5D02207DB3B8714CCD8900F91C87934A7E178004DDA6D91FC094A714F4A8B
27AB4787F38B78A41FDB756A5F2415403C8F7A99A825C8A6F37CE009152A0248
5C3A78D7E3649E597C9A8068828C2B964EB7976BDB0BA9541C3D806BFA4FB77C
5EBDD889F9D80B15A0764CB951D16524B621E0A4FA9D6F6F4C619646B14A25BB
40D57C2B958845B8788B60E408B6BD71BFC42CC17B0608329D093E1F9990481A
E419883FF01BB562BF7A8CD1C6CD40BBB35A568667C04C5536562FFF26C1CB5F
D8E91869E0A83A55638A573D81F89504703150AD673C8CF43B1D23ED27CD5E59
41D6326BFD00F8E2C46B4C975ACACB7A8A5A254A978CA100066CDE17ED245D82
EBD6D8A0E6E054359B579CD2E0064E5832E860F937F033783A442321927A1A8C
787CD363A398058AD4ED21814D5132E07D93C5A9B27F2B44615B72C93110F533
73C50E14657ED09FB27A350233112B0A339366B7373CE058456E0E1786B34190
AC06A6ED10305E09ADDC767335712B4542DA438A8FBC0A878608407B9211298D
B6C4B86449F9B3FA083CB2173152213DF47E7D07C329EF198E85BA6F03702324
345F9FAC6FA427A9DBF37C658288DD57DFF41A774A876ADAD1BD31E35F8B6C2E
FB81CA292E7C5BA6FB7CDDDA4209003976BE52A03A79C34EBF5CB4B9CEB57DEF
5C10691790826E35AB391A694D529730BAA8F75C5FDA4DBABD057D3F46466673
C2C816A836D1E36B99D07D17819B9F91B8D7347DA871E40063D57C1CAA5CFD90
04575AA9F1AB91191B962D64D82CD86F6AF3F1381F095C0379AF1AECE95D2547
CB2DD44ED0CFD23B1E1537ED3C83D34C8902ECE3FA1653EC33E4D50EE9329A8A
AF407145849ADD29773753BB577FEC7C1760D468320A79C6A1C23A69A87B4E59
3E92607A46259CE64EF5F3106A9747916C0BC2C46B83F574F370790FF793AC7D
7C48D9037EF31940A9C87DC01D4A88DE2D7515B5B6390EFA31A44589BE79A66E
6C292CFDE3ED8833DB255B8FF933A3F8EDEACADDE0FDB24B9AF2504EEFF2FBAA
DB48EF0D4FBBD2A0B5F8D89AAB7B971CC89C5334AD9996D31DF10C07AD641F24
AB4E8D98CA9421505EA0116A0876149EE60107620A89C9A3C8D1BEE4113428DE
0D55B98FA88D7CC258386B3D492717B438C0C74ACBC372F470DF8F35D6E5763B
312979604965F45E22266F569977FA7D7C2E62D9318B033223A9BC848420D62E
3111B09675FE9EC168A340DFDEDBADC1EA404EFAAF8B6194BBAFA142922EB643
DDEDEEF71A8C3865120E0C94D45E979D8392C29DD551188112A6AE98DB8CC966
2BEA42B9B6B8BD5ACAA54BD90BBD4607A2EFE01AF44913B89B791C0705FBF788
CC8A140549F78FC39DDD5FDD4700A56CE71FAACA472DD4C414087CAC63717C03
A3BD2215FE1427DE6E2BD8CF609735E847BAA0635F39A4BBC987172D1787E014
981A78A952644F5EBCC01A305C08EA4625C11416445E836DA7A3DE9A5C9CDE1B
9D487602DA79C4E845D5BE3CA6FDC088B462575052983010A2EC593B475F94A0
EC13432AD104E1E588A434ED028A2F301EC9B98B537DA47285A073A818373257
7DE94ADB70CEB5E6713AB137AD851808FA65D21C48BD9202CE0D5356AF6C40EA
820653A500302F0411B5ABF7644D03E17F39733E90B60F0DB14DC64C38FB8A97
C0BD6AB5AE1B5FAF5BEFB6A168497DD3E1C0933826D1472CCA9CAC4FA61042BF
B953C5AA0EA645772F1E38F523455AD0219F22C6E5E6975D49BABDB8EC50A3D0
6D3366B8A9C7D5BBCD5ACBD7B86D7E1BC311C99F108D54FCBE543CF02200BB9E
6F1B1B21FF80E30DCEA5F40F504468056D96AE7E0191A21742CFA51BC826BE28
4AD55D76AAB3B0B477436A6CE794BFF0ED77A7847F7CF4256ED2C90961ABCB4F
B89BE2D0D207C80CFC47E1922206029590608C6420183612DA9CC6598BAAC380
D6BB40A876D2BB649A5C2137F736756DED63CDAF5D281C0B5F2BE9E890D51816
AC91DE8D6D8F93A35D8AA2145E0598557707267CB6E58F6D9CA6F5B88EF3EE14
0C0F8E398980C7C6DCED448D1588FD8922A47AD1FA0D16BC17BE4D1495247B1E
C6579E3121725DEB36EC7B4A482E97B68B3C6F7239B54D7AD1F0AAB6C7A4A269
4669C901D7E46F00277891B9231F2831C19E73CF8E1EF3F81C1626E392D4B1DE
9A318360B9CB06F8F917B354F1D0ED0616289C27C1517263C2C8A901335B7753
AB510E74E9A2E37BCFACBA21221DA50567A45EF2E120FE3A811ECA081A3D0478
D3420B503563CCED8163121C1F672C14EE66ECFF5B219E8BE1598540175EAA76
406A0BB4DD3905C314C9262D553D7CB133CACA87F1535FEE6EEBC67F90818206
B95ADD734EB952C3415855EAFBEF4701909913270E0060FE23E1DA9A96CC481C
F1E7447E0D7936A4FFEE97317843F64743D9961F5F0B5A7C984B6BB390F2D2B7
A4A7376D231490C6836957FDA9D7799E5ADB6844A46FE598D19AC35D7FA92073
5CE37D8AC7115190CBAFE8841364D8DCD31B3D5122C8661BE65734E463102B69
B470A6190039BD94F2EE7972D0B24694AE042C8C9046F1ADBC7E9F64BA5B13B2
D3DC8707A8D556B16A79371932FE7BB7FF36389A0D65C454BAF07720ADCDBEBE
DE2B2275FB0BFD30DF0755C050400A2697EA21C97B9DAC9C231977BE978EEE0B
7A3704245DDBD08FCC0DED7F3E886E0206CB52BA639FC293CBDF7584CA269DEE
1C97A0F984F440B9BB7815A53B725661B27F5EB9C425CC1D2FD1DC099F780350
93ECCD7AE138C5AE0FB4F043144C9903478B4BB53E4EA9CE571B9871E0986884
51E3C31189183A62A2EC5CC2E6A672FE540904D7FFF20A101683BBFB391A8FF4
70C147C6813785426E50436F7CBED5E49046AF839C10ACC0ED47355D0FAAB8D2
509FD9478CC52C35F034F126393B7E62A21938D2166FDF363FBE20932DE23964
3456C3A198505449439794DAACFC09D88CFBA928D5D432170FBCB19B4C29CE1A
3D849EE85A0DA71350E6329ECFF1C904A94473322298534D5CDC3EE499B35288
A3D966999F260EBB2C2B7FAB368FF1A3266389B0907B8562DD08AA56021CBDF3
DE1C1F8645DA03EA729468D2EAE72FB04C6D2B4416E3E215FAD05624386895A9
7EA28B1791D94239667DB145DF8595130A44E89C39D2DFC5D3BCD8274E2503A2
D9FB123767F732E7BC40839603AF3DE5A65A1FFB5B46F4DD795C6AF904EF2DB9
9A4D2FF56D5D797C5209469456CDA0E8BFF82F12FE318DB9E65DC2F3E2A632CE
F071032FF667B3A1F62328B34FAED0F5B9722DB2D6F514E8C4C4BF3333DC0A7D
33341F627AA355682C977185591ED2237DF1592D73E3B8C51099724F9157C136
735CDB7DFD57D62B513FC5B63D113F7F0D00B0C41F93C548AFC465F5E37BB0BE
7571DF990F78D69354F116E92586DF8E30B2976991A3B77251DC0F15B0A7E82B
523AD187A3AE44D93FB7A0D5F3674C2359AD152CAC44BEFD881CFA38F31499DB
2BBE8FCC2556BFAD8971BAD3E036F15442EBD1557B0BBD97F0024189BD08ED10
558604C17FBE7FCF01EF9FF989CCA3DD4237244CFDACF1D190103A64E569EAB1
1EF3D3C7E4EE38308D20B6D91423D4F417B38E66572D9109520A371D9C501408
F9B9D1A30E09A7EB286EF0378A1D9E27F29C68624E863B28B2E7B4C3C38BF32C
CDDCD4CA025070AA646DAE4B889B575E8F4FFDC234D726EEDC3E7131A3049A89
BAAC98C00DE2278E989D877D2C7F808C2D7974C2E43250664A4D429A915D9F14
DC9577AD31EA98A51A1DB9CB0EC09492777B3810FCF8471354D04CDC1F08BDA8
FB63097109E771AB92E0198C9495D378DDF5E3879446BFA1B4F06E2C329AE0BA
4601D3607DB7466631822AF1BAEFB301E6900AC2B65CBC26BD9497A3B908EBE9
A2B47EEEE8018439FD1AEEE194EC060ED2476275D5384C43C08BF69E4CA44F7E
2A7780F6C88E1BE994C9B91DF4FA10FFB4FF1570574EAC8975B14588128A4F2F
6DC7A1758B036F6C2E48AC5C1E930346F7CCDD0AEF1705407B94B24819D3B17E
F3799178AA4E926A15A00063146618C8D2F36115E1867B79B61186AA832CA1BE
709523407F265666D7579BB8933FBF8C116E6294B75F3E3F9C620B59788EB9B9
FC1432C6903DE4B39EC952DF960918D17891CF1B76A76C2C64A87D5D014E189B
B9EB0D1DFF54A93A8DC14BE07A433D04CFD43A54A673FD23ED95145803260D08
7647FF55993A6C45E87431AC3549F382409883B823CE9FF4464500697CEC5C83
1BF140BB33970339EA0DB212ED3410AB183C2EDAF173F0DC106177F0F23A123E
4C539DF69555C9B7126C35A129D8B88307327F79156D6C685EB8A77528DF8313
1F02C5028D0F35B01F0810749D7DD98100BED879F02A81987A68453D1452EFEE
1B97A023938F8BC45C2E6ECEA957F5A825925463C653802571B320DF9DFE3589
993997CE0F1D799465DBFE4009BE6FE861BD920A19FEA255531A6A62C379993B
DB9178BAE43920E3AD73ED8D6A74D2789379B0297207C811514599AA82119E8E
EFA304677858F156E9EAC6EC03872BFA8D9CB1975BB9026B56FC3F24FE6E6EC3
01C670028FEF178AE85EEF9167CBA7AE6E3F2757EC5A6B046DCE9DB8F8CB66CC
775773A60B53D4B46DC4CE9B9FF1A7480F80EC4A1788BFF001DE4C2236D33C44
7ED04ACA9DBA348076F8E2E61CF29780690190D2E829323F3BA9F7ED7D399CE7
35A6A51764CF5E131CE693731B0C499FCB8CD67A6E7F7A04BC64ED1C8DB6CAFE
561E8A2FC628B5FB42044DEF0D0FCA179322EC30767616DAFAC22A2B3DDB4912
607C200780375606E7B763D701554DB8626A77E47739C769CBBFC9865A54F234
66508FEDA251C87F1111C25F2F8EB6DAE7A19255CD29401777494930135A961F
58F8714232A115392384B5A41CA2A7CE42BBBE661B4B40F59E4D372461555B0F
22DB7DAB1895D9C7E6D3297326D6AB654464E3E70ACA1D593C2CBB0CF1386B59
B3EA31C285E803A4466B47E2F3918C4365A348A02DA99C006C44777716388AA9
87B2665C366918880C3DA0E469D3509EF0118A4E98E17F6D7F9217151E8415E6
2819174A53C38A25519EB9A98EBBA5BD31877A487B252B5C832E109DBB9FDE2D
D6A4C645923DC29F384171A48660EA36DCB2D93694EB75EEC0AFF68345B17B82
9686C23D1E397FCDC2BD63B0A24FF7C52E96937FEABC99DD65CF6852F09F53B0
87A3E5283AB296939AF66086E18860B42C4645616799872263B1C363FB283C38
F0AA2A2004B7567780B795D46FB19165E0119C4359B471668282B84A6E6BCBF2
83C414E8AD6781F12B0F797290F0F4E5C03F4C05E63F7C7FE280E34E28E46B44
89C40D4C896445B96E7BED0BB864DA6469A9F85E1E59A84A6DF6B2EB858CA450
0976BBD5D5EAA001677BD081DF18650EF53A232A8C5013F4D50967B5140E02F9
E0CEFFCB4367B05CCBE5D82778636F411B2B72CF35172587C13265E7A78843F8
0CD719C44633862B102690C1545ED87773C6B3A8ABC8ABB13ECC3B249F1878A8
FBB90B6401B507B92E99DFF7DB2A6AFC77F1D7F6CF658032F8672E0E0600DEB3
8A0C2618A58148687C5C9DD69AE2932074325629DBE7BF3642EC9C7BBDFFC7AA
A6EC16C797B31B0006D964EE87B70841BBB0011D86ADCF5D118DE26D1A1F383A
2E3003317B192D35E8984EACCEE49E15DCFC537A774E8F036EA3BD1FB35B49AA
A6F5A4F21347549C1150C47407D2FBA6F34AFEEE271FE7E2B6FD928FF7E51CBB
67E70B290AC88D73F9CEF3648B20C687D77FF83C5898C718A1E73AA063486F3F
CD61CF880F6B9A1B6B68F3CCF0B1836A57B850BB9A806FB807693E837663D92A
3DF30AF50B62E4ECED90147C5AB8EBC973CD8D3946E50D5357E57CD8FF42D742
F39A7AA01C8B3074060D1A0C716B559A93FA16FFFF44DE8B99D6205FECE23D72
A9F61619E09C929FDAE02B4CF803672EF0AC1A4F76C8B2A035BFA7760362413D
7C9BCC3D58D6FB6BD665CA0D2C509270C53B5EA63F6D10265DC205CD8FFD81E9
0B3540C81049C819D1050A62F195A3051CAFF0C8404B65167DFE633C28A2F142
B856E17A6EC6EE510C1F0AB90A2297A6FA436B5116D10C6BCEFEE8139030E52C
13DD6B11A36BD9E98190CCA9EEFD8E5446EADB4DBF704DD1B3E7306BE84705CB
003C7EBA17035392BF285968C0DB6DDCC48590B40E808537744BDC081F40E027
E9A5005DF162A28E497C231A0B0AACA7779C204DFED7A30C3CEE434832D290AA
AFB6CA80087E8426C618F35939407E71E8A81EDC28658BCAC46B290DFC519741
D3858AE267B7F82277403C5DCEFC2A5038C96B8A9FBFDF25D6779971EC4E026D
010AEE32EB6A06C29075FF2BE551E14CCB2C3DED39E4BB878CF4D26D572D5973
33903328DEFCBFC939D820A970BB481EB62B5A8444D44E87D275D7FAFB371C31
D79FE5B5ED27C47B7BC864D52276BB967CF618433020670592121CF4DF75E6E7
F636E36678B8EB2B2CC99B33FC7A8B194070BA732D56CE2E449918CFA0BD6F36
15B632568E0EA67288F7AF12B053A535DF12D2DFA60982CBC90F930688C94329
B65E14F0617A0877BCCCE963F89BA1451FB3CA19D27633943967D45F730CFE0C
2768667D461CA559EEC7A15DC14530341A1CAF938F8592C6DFD756C0D6DDA4B6
82C5ACBF9965D25203E5BEA71FF2B972E2D21177409B07626EE46B039C4EDE4B
3BAE81FE47D86AD37AE081C6C5FFD28AB6F49B1FDBEC0F569031CDC00A227099
1367C2B10DE344349E457FFA665A46AD11556A9F47AD5CAE8B56AAB796E5C554
F4EA2AE2FF56014216ABBC37A0AD2B5A7187A04AAF44FDF04B0CFB2F24C24ECC
B0E3A458B6A64C4E94251295465B2D3A111E4AE90D46F1A6FE3EAEDC5E222FFA
572AD30B951B641FA734C987AA6C783F03CFD0BD479303CF3CAB8A7CA381AB5A
0384449C60F3766E1D58388B137C7C2A920797DD4157CD823FA597447627009A
E64A758320AC65513B3D4B0F757008B6FB506B0231114A3E5673BC1C22A00A03
EEAF96BFD849C4EDB9EA18273257E27877CA428C7C71FCE5AAF915AB48BE911F
483064B47FCD855A8966B52C3A19A15CB67C3D3C14C0F06528F9391CB4A43666
D0E8A4C13B56002A2DD5A5FE0134C4BB9A4D361FCB02C3BF7AA116B5539455B4
D778F3CF4A6AB36D20EF6457685570194FFF3E82C7FBDB6F4DD8BC56EF152CEF
5EB66D79C82CEBC1108C19CDE0D7F03EAF49BE166BA3DB1BF765EF0305CF3243
403EC4C62D25B1ED563C248ECE78A971F4AC9975138B38579FE7E7B9A29DF26B
7CCBDC5680292E5A05F03A121970E8F1633C58C6C2778DB1347BC022D0E2FA10
D86AB5C6B4B481ADE2A8040297C80939840A16E3A746BF5FE620C9DB575D318F
025FC523B81E16B50581C1E023B5E02F4BDAE14C5B2C6B6ADAB369C4ADA9783B
28C54C4E177CEFE4C58D836493698C04C678D81AF9A46AD130B06112C4CC70E3
B233AF175A96EB0567959BB1E236626AAEBB939F70CB09CA40A21CE46D1EE38D
60996CDC72A0FBC24A7050ED3E7841D6F2A77C4632EAAFA8525DA026DC1EA8EF
D2C30BB9D744B202965DC3D620232885045EFCA1034DAF2DB898D8A086290E45
115C8DE9877BD43699D908CC3F1B8384E661A40036AF14D1CB2B4066039D0F87
5F6F3C8137FD175C468DBB7DD83111643F79DDBDB350A2A18E0FD974135FB2AB
53B5B4648FDE13AC7920214B34B58A549D32519C5D9178BEF49F6185CED1820B
C8C8BAD838907339BF36DBDB4FC0910DE4D3C078FC13D552DD8708B0DBDDB463
75F63FCF1F58F13400D2BFB8296CAC6F1B2A465EC90AA64C6BD5C4A03C09921D
3F83DAD86DAD66D3EC9333D1DE46382E841BBF95A07528C8343292E178983EAD
8652B985D89C0E713F556814E051C6CEFE7E83C2F379B88C0A1693BB33D44602
2A4F9B9A418954A645AA0F6D4DA8F880E5C6524D974981091CF787CE9CE51D48
4F7E4976C4BA1C110F70D776BB12E71B9D621511E0FDB61D6BE0D43D699D9DD7
408F16BA69DD6FEAAD3CB6807D13251534DE1386509692C2E2161370940BA53D
FA02A07351BCD8C95F89E653EA5D589F257F3B177FCD274F8F6B6D7AD5E16EC1
039ED26273E79E39FF03C8DA1A4DF6C8B7B0EA9E611C05709D9CCE9EE283F4DF
B79975EAD0E341B382DE4540CE5E663A6F3DE864CFD51444738A0D95D1808AE4
ACAAC618F3F16299CA96CDD55426B07E0D6E591ABD90B651E24464F80309EA07
DD04E74AC5D873DD414B29138A74919652BDD053FFE1204E7588D287FEE615C0
61EB1B3984BAE5B41853C84DAB15C962534AC5130E87700E6D1522A7972805C6
C1CD07055847BE61B9B904F2F2DB5537B2139A0D8791BB855BBF53783482EB6F
8264278EE8DEEC7FC662CE4F3167F38C3D106535534A9ACD6582F3273B6FCE97
86BCC3586CA953EF480D4620739410A5F61035B90981181192DC54032651E305
8576517BAE6EAB9429FD359809D95A11B3A26B88CE0DF9B0779B4235F7B5C9D2
A113A8B6A59568307D70C25A090D4AEC9A71563EDA990CE3481E7E574106E677
1F4A5F8ADA324165EFB0EF200E16BA13E4A36F92147E38CD271718777AE53034
5C43C74E88A8A1E527B0E77BAE62868382DA75973AEBB7236B120EF5502844E7
50853317185E95A7C250D459945ACDCC8DA70D5339C919D9954FE91E079DCFEA
12E1BE6D51D46599D8C2DDFE94A2105FC2D898DF5FA1E5A94867E63CC03ED3A5
C17C70BBC9515DBB6667A7B772523155BB827311033820B0380F65B3AA4F3E83
7B5A92ECB4DD4B8C7DBE9B8A3BD00614A35B7BD9E4187F68C8AF448E45B09267
39D960D4920A692FD967358CAFF45613A1812AE6DB4A62146B0400F245DFF3D8
C391A5FDDFA9D9A4100198251715AE46CBCC7DF2F9BE6691B79CE6967EBEA655
522246AA9E837F39F1999BC08418A54A12B62049509032903840182F35ECB419
561B2C36D43E3102CEC57B8A58E46532BC2C3F5CE609519BAE4A852A3DB40FFC
B37C172B66792ADA50A6FA842125BB44C446B18804A42B5407B67605F58001E8
F77D69BF9D01BA23B36EE11CFB793B195BD4BB9ECC11DFC3B04B9EB22FAD6B16
E17D0AFC5974B91E196B6DF5324DFDD018BC44188E63C0A55D28789356455621
75EDC8F14CA5E94176E82B20CEF9DF0D0AF356487ABF0B563299A7E86BD65251
28EA76A0D7779A5031AB41EA07059ECC2C13AFAFA8AEE419D43C4429E93D9208
05E96332290E522C15C1AE0CEEB687AEAF0618554EEF9AFB7A50AB184C4D6646
7BE1397F82EB7A85DFF7FEF08D762E63E465FD2B17BD2BED7CFE5F7B103347F7
19C0848A1EA0EC028B2A574578CF69EB3451FA40ED22C16F1B8DFE03EDD38AD6
A57D3251B528C31379673FB1529A9AF9791A4C424A2874C0D00EF8F4EF7C972C
1D2FA4728E5977AA2B693A1D4A0EBCAFEDF511A461E4A4865CA1CA04C0E671E6
57EDD876C2E70E8841364D9C8E8A7E042A23833D25AC141FF1F6B705CA7C0B29
FD60C8D9E163ADE6A55284AD768E7F1F0F0D46CA4E95316497F6FC73DB94CB0B
79AE05AB671E84B03B82D688E3D95DEC15C86DD8D10F5DA77AFEF7EBE3185845
084731E3A0890C4632D8F9D8196B6AD43E15F3322E36FEFA77D26C34ED3323DA
25776CB7B9A33B04D6AC47E4501C0E3AB6F8F05E218AE28AFCCCDE87BF0D1726
0A4BCED8D3532340A46A1177A2269AE20BF8CBFD7E517982F9CF0D4F9458F982
8A664B3986F774A8E53E8EE1BE623EDD5DAC3727821536472D2381DEA09B8BB1
F73E691434A50D33DCA5593B6AB680AE19B2231D557EA18780968331DEEC1ACB
0FB8A3AF9DC4FED3912AD23C76C97F952DC8AE60D2EC08F0C85E2D35E33B794F
D8B021734F471C65A0A2FFEE1BDED30D4765A1F0230730155D0AAA52A966CCC0
0D3DDEB150C344328CD04AD0D8083E0BE447672358DB7D34B50BF2230C7ECF54
90C1D4AAC519D0313E2B371F7131209281701D60001C69A1FFF5732BC1E0076B
11804BCE07854589C4BE84B31A81F2784FE0D5F242F5ED8508E1CF87641178AF
DAADDBCB87A95E0EB45F47522BD93AD903B2EEC8D3C188F08FF2AA1C7D960281
98DFD7488D907A49A5C52892ED6171B0E25FC76AE99EAE915AE520DF86C1A46B
EDA4208F9A039FC53E8D60AA215BE167083176AA2E3A947DC40E7CDE4E907567
9A5CFCEDF130FBD2BD67D4FAA2F3929DFE0F24C3A0EE301101D63EE838986E89
EC302D38D6AF6612BB83188C479E48F8091E557FCC0849DED89E335BF17474BA
AE04CA1905B3762624A568CC911A30F214ECB87D0193BA0B6F67302D4801A736
D187122C5D1112E84725B12C2B93AF43FAABC38C498A1E33FD5EDC497CE81BA4
91CCE1B2F223FF6AA3E2CE0B28C3575F8374B2AF87E99A2DADA3728C9E3E0893
C478B3F7443D9A332101D6E98E963E32C1C000CA13E1A1CF2080943CA932CF05
5E41018138EB66FB67C22587FC14898051C4FDE207F018664693954B4833509E
1FD137D8B823953AA248937D59F2D6177CF5F25AAB7D45791021199BE22D8994
0BD35FDE81EB8BAC342210D5B0ED5550C4B54109A1B5D3696116BEF7A56B29B7
FA10CA7213829FCEAC430A54AAB1C77B24734D53B271D6B57F53D5F6B85D40FA
4E5913528BA06352384BB5EDE175FC7E481EF74C90360755DFBF7D9F9FAB94F4
AB4F1298FFDD276633AE882A540B806AB247982B2064115FCC2C0B048E62B50B
F64A9A860C3B953BA836E3E7313AE910CF60A7C2E6C17347900DDC598E1A8BC2
5C0F1007C1522522D8B549791B596E5804B7F90577F737DE057751F66170EB54
C1D730D4C7599D652F2DFC322AA7F265EEDEFA3B5BA9987C43E34B7A21AAFDEB
8EEF347B1DE9CD834797E610DB536D76C9184F8DAC563B375A47797E0F0C40C1
59093A6C73919A888BBD53BF4899A3D67428A633DF53752834D0B8998C31887D
0A4C231FE009050FC2D29D0327D95FE84E9776C18A1366EC96004C09C4DB5790
7457AB1FFE65DCCA47FBB39347DBC337F777DBEBAF006462A565364BD1C64F9C
1F11103391785005ACFA3D838E3DCAE83730B4ADC061318FB738328A4FA165EF
C4B59C3BBD5111001519A846BB83001640943EB2E9CF8202D34672B6E55B3C54
5DC01F32A7E2A199E9F45B099DD8A7DEBE298B7883E0DA25554FC82FE4E94B90
0DFAB7D97CC0F998B96AB3E3E182E29B819FD861E52B04E00AA389893E477F54
3893AC88C956283FF7B7628DEDC302E0E830C90E221969257543026AEDC02C1C
B17CAF8D1D1E869F0A3EDA5BBEBF135FBDDE4099314E3452D1C3006B69E562A1
62AE5CFF0CDDA4763AAFF2692126B4FADC3C4BFD139E015E0D1D3591BE5930C3
56E6B8C1A4F0AB29B1EAA43FE53F100DE329F2992ED2DD8BE4396C900A787F72
8B417168EE9C32721CF77B0BB8F785CB0FDA4BC3E04966334402F76388AD6AB9
DB661A04037C111998C73DD8F3EDCF0B1F51A01691E505DA03AB3799AC2758F5
630E00CE29C4EFA9548CB450E12BC8B4BEE5E7F224860A47751DFC2986440D71
6CFD5D2E9A57D84846762E7C7940B91077B03D7B7109D7E208791B387A55FE59
88405433B58091194908791602C3A6572740D8E84B479A9CA5FDB4685C29D7AB
3515C06C70450C9B1085CA881F4162D5EBF5239C62338F7EB882C2D4CE53D9F7
ED759091062E1DDCABCE4371C20311C018E4CB5C55AD278CA8D5550ED65F03AD
74393AB3183B6CFF11BA62324EC334B969B3FFBA35EDADA4AA78CB9659AF92E9
606476F8F8475D52E2350677895DC6E3EE8EBFA01DAED85125E5FAEE33B56AF2
6E3552AF8A5CD10A347EC239B465BE0416FE1EE4BDA71618D70740BBB31824F9
36E80F0F7F0D395E15943D0A90F2B930C579EDF743F2C4307989BBE10C6B0BF0
A640F2DAAC77D9AE654BD6E4359A140F0845EA7DE0DB3C13B8C18440DA54557D
A4B62DD372DB1D4D77D17EAA35BD7DEF5A54D050720CEB18CF86A3D98D4D0B88
323556BC8C21388AA2B223E95401B4A1A3DC32DE58928B59A875DAD61C76F5CD
D4EC5A431AE3F97BEFD291A0DBA52EDFD3A216173C3E69F47405B956E7F91E0B
F038CFAC465E3F5A9BAD0ED4572921C8A758DCFF0990ACDAAFB55D94C91EF75C
46CD9EF07F9D957AB2A2DDDF1E29A315D0C14B6EBF8A741D6182E270D23A9037
3A232F85471EF05D091824EA3E015C7CA599298F00B4BE7E8128F94782928B73
E32595B2F9E156D2B163144E113AC272E689267F146C347548D2DC4D9FC1AB57
55892A6126B8BC8E30EC6D6E505DB3163C5E135D18B4693417BC7BCBA9B9B3CA
C716FD7A8B2F7B9B62EE1105F37A99A308E7DA80A3018D0AAEC613DECC7E8ECD
80C062933B377DAD8F4CF2248363BDC157691AD5BAB068DFDEA684B3FBB7DF2A
7921D5760334AA91B723A3FA7790B2A93DF324554A3E1026FFFB8F58BEB06237
B3DB1ACF955AA10F59FA62C5DA5A3BC1FA0DFAAB319D080F4B3138D713933F67
669ABC9EF16FDF69E65809B7A1A509DCA9FE68F412B44A1CEB9470BDE4DBF293
6E063A86DF51F88A4A14DB003C5D21197F835B183FDC1269D70A0CDE6B62EFCA
1E621ED2A65D66DFDB2098887BC845E63C35E4185C378E7C7961340E39855117
7A7D13B2A9214A70E461A239212F05BA154584A312D0DC1C199035B90E8F7447
DE1DBB43878E3EF52717811B1078CDB36CFA51989CA4A1A08266ECB80F3956DF
84FA5B7F11E4344AB9FD5320046666AD30B65C11C377B8756144A925E5C17D7B
3C0A3FA070003AAB80E1A3A0DAEB44ED7329F584047744C14EDA3CF5F68629AA
8BD94DC0BFDA6BA503A1C87CE054A286AE91352C3989F94CD805A3644644F435
247DB0D87B92E5191324DAFEA271A85E85138E2A60F54C6F14FD3B6901553BE2
972BE760F64560F50B85EE7FAB7723F1B8A80643CAFF5027E3813B909CB08876
F4B9E4DAA7AADB638BB3C953D697DD343E818783667433734F6E15A0300A3085
FADE4856A0BBCB599889B62EF999B8D26A744BAB043B3E12FBEFAA4EC44A10AF
C7BE1AFC3CBA1F58DC5EB73B4B10155873EF5801037F2D1821CB77BFDB5A7B59
3F1630B9F66C9CADC7DB8DC457EDE60D3B05AD09A2ED4342C9E5B6D27005A564
1C57BAC87FD4355AD56E8BE389822D0928882B372527F489770AEEB76ADBC0A5
2A2AC1BFC8C2CB5B60D7D97AC2D3C7D6679B089358A46E7B095898DD8400C94D
A185F944A86ECF1F34E5513AE0525A4AABCAA2CE2B26DBEDF420E0E400838F71
87BE74158F60C08643BE38D5F3F83539C0115CB9956DE30848498C341054EB45
70126509D66B7B1FC0D307F1C1DACA017DCF7671BE4369FC52A6A243485FD737
1AB6ADB814ADAF9D389005A72DD10322812EB02E50FEF3F5C561400A911140CF
C69CD3A0E9DE5BAFAC206A9C811314B3EBED0D990BFE6A842E507787E476BA17
68842060C010DED4E8239CA2BF28A562774698408FDE33809E55AAF1C01DE9B0
F6FE3AC29AC09388D9C0678E5BA6A4CEFB922726F0B4F2CF4E1FEE0283A64F8B
9169019D67DFE2417BD7B20A2C783E5180ABC360DC15A8C7B8EF085D27B94793
96116C17E241EFAAEE08796DD9D7778D29F462B701C0A3F4E70919C5E08EC814
344A693446DEE692EB91611C520F73644D864B683BAD0012DE0140C42E34602B
7F624955C615C69587F4BE87C2E0827F6AAA86CA5CD665AE523239DFEFEC397E
EC6E782C51CB8A0B17AAC49AD6916B3FFD9FFFA177D6BEED4D6325A7A83B9747
5079D4036AF4F1DD0331E149D6A888D5F0AC3198B46003AC105E1868C4A7FC8D
4E79485F6E3118EA0C617C71C1424FBF5C497F391141F209D9238C6AB44AE06F
78E3BA21AA224C0466FF804D87F8E8F6607639FD0EB274F464F688D6FC309137
C61F546AC17AE77864CBC9CA07A8866B21B9D9180BF32FB4A1D033416008A952
D4D6625FB1B9581F7D547B0B365961300BCF1E651D7A822962FFE143ECE48A3C
8052AE9EE835D551F914465A96FFF618A1A23A2742978EE283AD7611EE9D0994
25084FD1EAF8837FC49D3DF9A817ABA899BC76AD7CDA45753A378870959096BF
9972FFC16859FE9BEF8CCB1B3676CE31B98F0EEFF80271B042357B3C8CB611D6
17F1AD8AD5A2640CD2D0585A0CED9C3F124470C92D7236CD1D190081E9396B7E
5567FBFD662A1DBA23C49754A82CE8616B55B1147525E3B27E25CB5974FF24DB
C476511EF0DF98CAB416A039F34FD1689A14EAF776CED5F0850A444DEDFDCB11
084A764D8ED51CE086C3227E5DC5DA262FB0901D0419D81A56C229BED40832D3
8E493CF0F2066299B60B45B7DBD2070763BA27A1D92D0C4C5A80BB4C340DBCD0
C6A722A310508F932574846DD075B4007C9B86D3DCD8DAF8C71DAE1ABA90797A
CF4C10668B9954DED003A011BD4D1EE2D6127B0F50DD52A19541613E4DB4AD12
329F0B879B59698DDF26D66035DA17D269BD4183F18D16186A3EBC02C60C1F56
9C652CD08EF949A5A3E7F489E39E5B92C3E5E2BBBE447AFB1AE99198E3C029E0
A2A09A84AF1A673DF7E606CC46599C86BDC811B7233C1C8A8059A23FE59D4974
DC2F57E3269D3B56DA259FBBB002C0A5F5A74B5B35436185077C2E690023FDC9
6A1BFF3D546F905A6CCEFDD6FC5C0A865D32E6584325CC5511212A800E627A54
676F019744A5DAB8F4172B858A25B0CDE2263044CC5B49D36C87DAD979591945
36CBA63BA935CCA30ED45A43E8221B5201A5E671DBEFAE0B21C8EE0F455292F1
81BDA50FC3126234BA039F439E4FBAF9F75944453CD01CCB75F528D4B8A71F04
A4C533EE8B908BF660E17B50CA02D60E11039C1B45C1BF21C2058CE8F0CF45E3
4F3E676FC543CE5C95A28DE7FD5E6F1721867767B27689F12571BE07C5DCCE8C
DBE1C671B57EA38B2079223AEDA833FE2F29D7E99809ACA8535F5FC2168C10AE
5AC0E76860C33076116E432CF233822F2F19A515EE65239E00085CF5CF37FF54
7A2102BD1D3004D42772EEA7FD2126AE192421A31083E4E95937C710718EA73C
0B24B257B5B38764F18535E6F5E6BF36338EAF26373E931425B8B484FF0FF92E
C5F1D05EDEB73FA065FF861C486F81ED9A17D4CED0B48615479FCA24ABAC8264
EAEDB4EE5B6934A5A2808C20ADDDA4FC6536503763E9ECBA83E84F931B0EACE0
DEF399C0D6F206A950372D3D8825703F510407A44C13927BD86AC25D87127133
23CF4FE63F101757C4550AE4B05EF690BE6A42FFF06D2FE42119CA09E231B48D
D341FAC5363146B9C2B24F205CAFB8C0D32FCC51C33FCB54F07F9ECCFAED2EE9
F871159B2F3CDA3C97F13AA529A79CDC484161CD8E4E849B1D5CF2935AEBF63E
296F910967C23DA7FBBBDB78B23ABEAF34F283055074640697DE1CE393C3F333
4854C5524952CA15276E491A87C46AB298FF2ADD97A1BA48B62AE057C78C8438
CCDF31C34BD7514C1B1149DD4553FEBE2A64CEF32C045E1F90619ECC527459BE
ED152C11A2B505028A10BBCD0C5B65DBFD5256031DA2BFAFB52485B152A06E1F
2708404D9C3D24B5F0EB003B0C83E5850DFF0F58086F4797583A5F1CC574006A
61ED2BB2777FFE59B0A285C6F51F9B8BBC28551D93BB225684B50F68EA0D3EAB
886AA04DF198A44E36F55A4E1C94CCEBDC4A9A2BC49A12087B4FA355FF616C14
E2C9B329D132A3DB20EFAEF30B0F88EAAA08B826A3F23AEBD54875623BEAD0D4
76EEE4E6385F73B8FAF8288DD21E1E1508D39A8254004F65DAE0A4E0C23F0427
C12ADEA14BC985D14E8D707A8D20A35835B7128BEC0ED17330CF085F1F0EA7F2
9871175702990D7BAAA7CED49F26A4168606EF90EF1804A02C7C2643E887E8B5
ABC1832A610A22A690202E9142BFF4171B70EF238C02844A6B3591DD3FB9AF60
B51F9E21FFB15A273A00CF6BBBB179A31838DBCF63442E4E16BEA608D0AD6E4A
4A4541EC06D6B7298C1881D9E4A40DBD5CAC100AE10EE116AAC705E594EDAC17
CAC9F264847F8BB996D73BB623CAFEAA6ADA64FEBD65118ABA904501D090671D
33DC9BC4C40CECE0E7830340766743D09825438F576F1CEE77D9D9857BFE5CCC
93105254FAA9DFB54938E7808EBAF640DD3AF2231F0A07B3919737D408AB8A26
92FED3E8772A73892309E2F1B27C0B6464FF9525613C019F9B133AA8BA4122F7
6802717ACB636418B243F9A3F77EE04A1532DDFA7CA3D5E17CB3CA2C3C1F0E20
D65DDDDAE9F87B9DBC20C909AAA8AB24B8E2FC06024FC98C6C23360F24B4401B
4B7814A1682092B421FD2A11F6C9D7E5ECC06E9D07E0FAC0EDC9FE17E2722143
986CAACCEFC793B960637F991D8CD6214087A7C837ADE37636B75DB4BF138A82
871D54E0B2E5EFC99EB5E310F381170AF28F89070DB757279D48DFC2228A1138
2BD43F58BE393ED837415E564F86223B2AE1A413174BAFFF00A793D4A429EF98
2F39995BA4A5DAB7E2CDB8FD0CF670476E0FF4C355BD181FAB50BA2C76215051
F7B3633586DA1E175294D1879A89E323AA0B67EFE095DEB43AE1C1271319AF71
20EC5354032162A42DEB70F55DF44F8AF7E32C5286110196FE5B185A944F02F7
C57E3504722DD9E46ED7E491E22C32CF727983CD233B19B5D1D1322BDBA57DA6
71A26AFA97973A2AF57115D6969092598BFC0B12B3C40F66E90186D537D88579
945BEE4020D2F7368905E24AC6792810D995981205EB10D039460E7032058BDF
14BFE44C6D40E75BB1C91C009B70FE175817F7D3755F5F120923203F641D020E
A4097F044B9A95D130D30C6EBB377A6201D96FA9DCFFDEE8E8A561FD7D0C5A5C
D38F1791FBF967601AD746B6939E70CF356178CB7A5F2E816430B769AD3B041E
E1F8CED039E86B76A317B286ED8658281B53FC2990990FCEE308C6E3B3190493
A48DD548E1ACDB2B7E664FF6404657430F1CEC53185F945751284153B28B655A
433C00FF06650E084AC1A0DC0B4586C3992FC59CF55EBE246A8AD1E9A8E68A19
3C376EAA0675ECB90FFBB768F024E0D901D6F4BCAC6CFE8DC11DA4C7C128158B
9B251B883A1EEF0535CA0752EBCF8AD8BFF4D0BB7D67FD984CF1E59EDA8BEA27
9B7D80F91C777665128FB7A4B51B6FFC7BC695ACBCD15F043B48E0426988099C
CD852F9520449FB4BD8B0C5428E74C080383BB5F8671B84860A67D3E2D57975B
37123FA4542FF1BF9C8D7B6967C9752D4ED28ECD4E161B940431D004C8E88FFC
19D234DFA3FCCA8C3287C9D890C05F6F7FEE25EC23E57751A3A293C12C4571C4
47A0347AF292778695EE77D738C6C79D7ECDBD257518BFDCEA71153A90982104
90F143B08CC19B1BC0CA48191B980BAD40943B4C323493D01A15F316BB3A4D4E
82D52C7A4E467F7CDA3FA741439671433552BF82C1CAD8F09311E55D6BC664A2
2F6A6D451C19360FD86DBEB6F0F4E72396FB90E97326C516A65EBA91D11ABACA
C6862531B21FA8D2783FF0C698C2A8FB0AE25217447AECA6F8E3F8E7D448A44A
FE1134BD2CCA104B8D5FDF29913F71CE109C9B685CEC846842BA7EF1978579C6
FD288DABF3ECF5937B964DCCF25D2190C3DA44459A9C4F01F99D41E5C8D47A79
36BC0B5D5F9AA5F18BCDDD98CB487B4448647C31E3E9133A97549C287E8A54E4
7CF1AAB855EABDE6774BCE7CC77605F9AFBBA6922D59CE2F222DDB1CCAD34942
20EC82BABB9A154DEC808A5BFAFD77351B99A354B31BED4D758C49A9222B669B
2921DE7A3A5D24749387248C0605EEE3C39FEDF35A984E0C38959E85C2D6702C
35B9440895C05CFB5A2D12CA7D87436C45594072C60949A4F63547C217662FD1
9CDE6681541594AE714BCA85FE11E8B6B58B3F58834E0134F7F384160EB9FB56
F438CF0CD264063AD88F113DD6D1FB13FC1F829A52CE9485A786667424DDDB61
3C20449E9D38E028087A7ADD830E56E98AFF081DA4FF63BCA689B97D7273900F
05B4FF3C61A2D79B2839B31456B317CCB45D2373DAA359CF98D3B3D1395BD1B4
786D0CEF5F22495B0873092DB814767794F3D0CEBF0D99BCE17A68C74F129C74
FDCD2F55E5FF7843EFD0ED735F4E26EC18191D7516F8E35E46719C6E741D0F9B
61CFCA50176102200992FCC2E8BE7FBAF71D8C87E1984F0E8B8336F636E10AB2
6ECB87BE9271F60DDE1B6DA134CDF6FA24FF01CDF46646A46765AB2D7BEBEB42
ABB29AA8B42A5C025C90E4AFE7BE3910AC94EB482AA79E1374830B2BE3C74788
1B8FE131874999071F12AD57DDD15F32C4655B804737C26E86D38A399DC50EE5
2599E48F9D437AFFC0BB01D9401A1FEF3B46FC74006BC3206DFB0403143B54D0
4650A7891922179BEB0EC0CFB4528253F5F89818BE0E749BBCAD6110EDEBA7C2
53FE28516A648EC6FA7774FAF7B9DA6F4CFD395E025A7B766FFA65AE08B1BF0C
909405D48B6E0C0FFE5D10CFD45FBA35E9986BDD8DEF2009B8B1BB2CBC480DB5
62A1FFC106D03B625CF49693BEAE1A9A84797D66C3384345C6FBA93537BCC9CC
5AAC74683C0AD2466F740CC4278476E7BAEA4C81A9A94B13E3BF40F0D96ED2AC
FBB3D65F5E0E8819A3650CC73EBEC1EFCCA5C8537A23BED9E82721DF9B9F8729
5C6015D2A8B9C8C603124371C28C727A6B1CFA852AC552A3B78A60FFE92A2A21
5505E86AC215DF053089324BEEE709D3ECF63C1EEE888440AC5C5A5CC7194B93
90F0BDA1A078957EB945145B39DBB012C9BCE2C02266DD80A3D7BBC06CE436CB
8730DD1DED184697A329C9F793EF2EA7A93D2BAFB69947DCD1761E865ABBDA85
5FF4E70E0BD8000BC4A6E0A9264C6D8127FC4DE7A75377302A84C4DAB150BA5B
AA2B8B897EFA6E4DF80FBD946FC966AF1F0611AA29A2FC68D024BFA043247D6C
F078932F50D9CE23852DDAC235306CF234199436D391169CFCE37027897D2835
350BD1BE4EB20FF6582D6BB6C2272F712342CC7F2E0A73BFD3326EEACDE5AE1A
62B6291EB2D0C91F7F8DA329B8438C4D4E38DAC0865CFD390CABDDCAE3224ED9
4FEA70248F62699CB28EB3FE896C9AA5510B31F2F70F2EC7546987EFEC1CEFCC
FB44B6ED0B8F984F7C8F240631442B3FD7269DC9F324A379A7806DB520B06DCD
28B32016C448D0BA831218193EB615A7D437C2D4C25A473EB7B83BA4C4E31858
8FEEC1950D7DB53CD7D3B22E19EEA37576011446BE6C92AA78AFBB5DC8948DA6
EE0AC4B40D66A3E8E20FD39962608189F938ED7E12C0DAEE4208508ECCD6CFFE
5435C0C53DE0900EF873F282D48721BEEF3B208C1E3F47F164A7D9B932A303EB
2D04BF34E4E25BB2AB6829C0D047C5F9169A3D34C1E3D5A1C91D26F210FA28AE
F67DD7FDF9D9A010FC2C54DBD482488177A8C8F976CF6115E0C909B290C90DB8
8F59AD937EA93147762AE5408660D33D8DEB53CFC59B937FA3FD19D520130B01
7EA72B7D8C1558A7277682F30B3601FA8866659A917CE52126015185D9CD3882
4E5FA2A03ABF328820F568A127970773DB00570674F9E175CBAF1F2610671376
F5FA5F36BE16573EE267B9DC8EF397FC20214C625DE6D6151DF9C89FDDC13928
426B30AE58A45377E49CA560AAA98A7E09174A6E6E01725D75DA9ABA04375D5F
CE9161F18807E0741434F835DAFEA069011BF2D20F850E087A99CACBF9F80E66
CA1A188A59131A75D4E98657F95647E0CE9B97AF701C512C171B61856B359C3F
7BA5C6355B4BBBF91C07BA7B5F3D765F6B9688E63120DFCA0253E2216166BB23
50231579E88A491307B98D2CF44DF77EB19F456EDFEC3DC81DA61E57559079B7
25F7FCBE64B73B3049B265415EFA5906A61160DA9AA5AB31358655B340E4F782
E20E37770BC21CD074C879D59E26FCDB86CACD3F08684D43739D85134650D656
F8E25C8361B15B2133FA801AE83EC1EE4A78B12E08173B1E9F95BE674BF085DE
41389BFE6F6C52904B971FCCDBF90CE427B03F135ECACE92C130B98100C8F4D6
80C9EB8B74EEFA38835855565DFDBC583ADE913D12269F3E0FB8C31605341948
3E831B4B0B844BED06BA9FCBE74A9F18003E08434279826B30A15183678D5171
A85668C1BF4CC923D5F0E80A02CDC23FD1EA355B1C665D9ADAFA15242456EC41
40DAB851EF4864B2195A7D4AD4B3A94F4C2E19D7E3C281EFF608D46A7C3F0A13
110066FE6FEF28CCFF181655165F0202B68C507C4CC9D44CF2577647A4C03ECD
B0EA82CD5569A12D7BEF994D57207CC6246995759076085B328D27528C7D508A
97371989AD1636A4959BA3A1908C397C9B79C527B36BCE33C6F9A7F3950523A2
04562523A0C787B437466144287C68E840B0FCA89A31E2F1F9498C13A7828663
B6DF04EBDD6D630F3C21337202F2F788A3566B22DA3DA0E59E039D76F1ABDAE8
28D4F94013E90349FEF6AB9DFE9E9C09B0CC6C6DE2E63413D01A39B568DD6123
53E3776D4646DC14D0766164844B4BB5FBB91B0ECAE27200E217A67EAAB489E3
EA656CF4C3586F26906F33DF6227F3C96780C3E1620DB56BF6CCB8A9DCBC6650
A1DCC3CDECDD28234B816A3152E9724D2959A37E5871E974F08606290A3CF7CF
831E63B3C9E9B55672AF4953D4D74F2E650842F2AC1A664376DD4156A971A135
964E9257C30849AFDE3A6320088E82697DEC73C2F7CA332D3D8D507E1EB91228
BE9EADD8C90D886655B5A91035984FF05AE664712D410FF28621EF560B72188E
5F4211D0886501DC248CB8687F2344E94A7E0D03B43D85601ED4EFFB4840B454
584A96A80F42477751D6C1AC95992E7AEDF385B58DB742E6EE96B9F2431EE2A7
87E6F35A17C3AAA969A07A39AA70D6B3F10C448324F64AA3D2FB5025A1845639
EA4BF42DD34C8CB4D5166746A58B2F3A85DC1138815E6B11D5F1597DD3BBCE36
35644C462415D01E6BAFC7FAEC1F9F3476EE6CDEB9C149A1E9D837166627BCFF
AD483D104EBF71BBCB92A649B614C9B31A5D13A086E2609779F4355674A8CF74
41594C40818A6D058DF46995E6E6BF0D1AAB8077E2CC3DB5761A2D1B13518723
BC283B9B9DED313FA78296E319ED3716BD86C9F4EF37A3F5FEDC3C45140C0DBD
480F8D1EB9CA284EC0B15CF924B9CC714ED39E0ED7ECD6E8E00DA93AEFC8C5B9
A4DD57ADE950401DBB06898EE930F00F42E290300363DE9D42EC27FA27639050
C15703078E9A137E10DEC0E6F27DC931354B9FB7B9A06B1F550B231FEC13E5E9
9BEEC66FA7D9E032166041B30E20256EA346C3261001AC61E1EFE7399213B7A3
2C67CCE21E724090DF574DC2C979D51E05B8B32000D4F6029568402940773C80
632F5BE25D7321BD5FF2164525E3C81A11D866DFEAFA4D2CAACDFC0E0D25B835
86B391DECCCBF49D5F138C578AFC42A4E4F8A4A0F1C7431FF57ED0634C4E6694
29240B6F63ABF07ECC49F49BAF99B47943AE8AB74E08A3E5B77FCA797B088B94
3289306FF576120BE07C35850F8B20FA685503A9DC12917B64346CE535EFC38A
29540DD45962E6C194ED1FCE16208D9A70C17D226891AE530F53A5DF1F43D561
41DB0967E2F6475061D73182AB85CFA82CF91854D07613061FFEC3AD7FD80732
9A791C177C4F83FAE143CB44DE736DA2496B15721DF719FED6B8584224CD65C6
361015A793F53DB9085D0A1FAF449E883A49CD5483A2E0D95610A4379678B763
B5A339F35E6DD3E75F966CAA393655A3527CCDFA2B2FE2D81FB19A9F0D37E939
230933182FC8C4561E1A1E457042FEB847B3164C33D2F79AE9D3B26C290958E7
94A0172DACF277A233A779A8E35E3FE2AF3A994E07A9FE8F846230297833CE77
F0E2A25B9F1E6652081DE489903B3567B047C6B35C47D94FC00166C71F7126C3
596670CA93BD15BCED586CC9DA1E002B222C20612B99C94A7B416C34C73BC4E8
038A060521A0F885FE1642A4B9FEF11B6143F51E59E50D6E4227E268D4027AE8
7E3E92FE22E2456660096900BD74EE52A8A91B6FFF0EB8CF5F432E37CE6ECA47
B33E41590A9878B78309CD7F9E9C2A5787D5D9CC796E5A926DB7D20EC18C7A7C
E06BF819DC9F262A2B4D3271D9C105652D0C38A1BDBC13A0828F98E36AC0EE79
DA81DC44E7C76D4A94FDB640701DFC5F5E2142742F89E0C0E22185535E57E3CA
79CB64F5918713E2E4595C5FE7BB35962920FE2921C64288645C0F092FC9A449
FA9C83B3E2212D1359BE959E9D0FA8D388B94DE30CEC770DBAEB9A9B574BDAE4
6610F72EACB41E4030D0130590A38F9A918B72335C9E260B0F7EBA31F93133ED
50948A74B360302A8B4AD3F6880A23320879BAFA506BB4D91450E732131FAFB2
E4324915EEC26AB5CEA739771F686581AEEF92CEBD01F912F1FCA953522F1181
74BD63FF18FC829E1AE2F5D3E90983FB0A31C78F1629EECFA056C7B62CC813E9
67861C1234420325BCBB2852BB8505A936C375590B8A141757F2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (main.dvi)
@start /Fa 138[46 28 32 37 1[46 42 46 69 23 2[23 46 2[37
1[37 1[42 18[60 5[65 3[60 2[60 65[{ TeXBase1Encoding ReEncodeFont }18
83.022 /NimbusRomNo9L-Medi rf /Fb 105[42 1[46 25[32 37
37 55 37 42 23 32 32 42 42 42 42 60 23 37 1[23 42 42
23 37 42 37 42 42 9[69 2[46 42 9[28 60 3[60 55 51 51
1[42 1[56 2[28 1[42 1[42 2[42 2[42 23 21 28 21 41[42
2[{ TeXBase1Encoding ReEncodeFont }48 83.022 /NimbusRomNo9L-ReguItal
rf /Fc 105[42 1[37 25[37 42 42 60 42 42 23 32 28 42 42
42 42 65 23 42 23 23 42 42 28 37 42 37 42 37 9[78 60
60 51 46 55 60 46 60 60 74 51 60 1[28 1[60 46 51 60 55
55 60 3[47 2[23 42 42 42 42 42 42 42 42 42 42 23 21 28
21 2[28 28 36[46 46 2[{ TeXBase1Encoding ReEncodeFont }69
83.022 /NimbusRomNo9L-Regu rf /Fd 134[33 33 2[33 18 26
22 33 33 33 33 52 18 1[18 18 33 33 1[29 33 29 33 29 3[22
1[22 1[48 3[48 41 37 44 2[48 48 59 41 48 1[22 48 48 37
41 48 44 44 48 6[18 33 33 33 33 1[33 1[33 33 33 18 17
22 3[22 22 40[{ TeXBase1Encoding ReEncodeFont }56 66.4176
/NimbusRomNo9L-Regu rf /Fe 137[46 46 25 36 30 2[46 46
71 25 46 1[25 1[46 1[41 46 2[41 12[56 7[56 66 9[66 20[23
44[{ TeXBase1Encoding ReEncodeFont }20 91.3242 /NimbusRomNo9L-Regu
rf /Ff 139[55 78 4[100 155 3[55 1[100 1[88 17[111 15[133
1[144 12[100 2[100 49[{ TeXBase1Encoding ReEncodeFont }12
199.253 /NimbusRomNo9L-Regu rf /Fg 204[29 29 29 49[{
 TeXBase1Encoding ReEncodeFont }3 58.1154 /NimbusRomNo9L-Regu
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (CS 444 Assignment 1: Getting Acquainted)/Subject
(CS 444 Getting Acquainted)/Creator (LaTeX with hyperref package)/Author
(Alessandro Lim, Kevin Turkington)/Keywords (cs444 ``operating systems 2'' assignment 1)
/DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -285 a
SDict begin H.S end
 142 -285 a 142 -285 a
SDict begin H.R end
 142 -285 a 142 -285
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -285 a Black 0 TeXcolorgray 3721 -177 a Fg(1)p
Black 0 TeXcolorgray 1048 202 a Ff(CS)70 b(444)e(Assignment)h(1)1296
397 y Fe(Alessandro)30 b(Lim,)i(K)n(e)n(vin)f(T)l(urkington)p
Black 0 TeXcolorgray 150 697 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 150 697 a 150 697 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150
697 a 150 697 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 150 697 a 150 697 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 697 a 150 697
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Command List) /OUT
pdfmark end
 150 697 a 150 697 a
SDict begin [/Count -4/Dest (section.2) cvn/Title (Concurrency) /OUT
pdfmark end
 150 697 a 150 697 a
SDict begin [/Count -0/Dest (subsection.2.1) cvn/Title (What do you think the main point of this assignment is?)
/OUT pdfmark end
 150 697 a 150
697 a
SDict begin [/Count -0/Dest (subsection.2.2) cvn/Title (How did you personally approach the problem? Design decisions, algorithm, etc.)
/OUT pdfmark end
 150 697 a 150 697 a
SDict begin [/Count -0/Dest (subsection.2.3) cvn/Title (How did you ensure your solution was correct? Testing details, for instance.)
/OUT pdfmark end
 150 697 a 150 697 a
SDict begin [/Count -0/Dest (subsection.2.4) cvn/Title (What did you learn?)
/OUT pdfmark end
 150 697
a 150 697 a
SDict begin [/Count -0/Dest (section.3) cvn/Title (Qemu Command flags)
/OUT pdfmark end
 150 697 a 150 697 a
SDict begin [/Count -0/Dest (section.4) cvn/Title (Github Log) /OUT
pdfmark end
 150 697 a 150 697 a
SDict begin [/Count -0/Dest (section.5) cvn/Title (Work Log) /OUT pdfmark
end
 150
697 a 150 697 a
SDict begin [/Count -0/Dest (section*.1) cvn/Title (References) /OUT
pdfmark end
 150 697 a 150 697 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 150 697 a 150 697
a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 150 697 a 150 697 a
SDict begin H.S end
 150 697 a 150 697 a
SDict begin 12 H.A end
 150 697 a 150
697 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 150 697 a 233 797 1668 4 v 150 954 a
SDict begin H.S end
 150 954 a
150 954 a
SDict begin 12 H.A end
 150 954 a 150 954 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 150 954 a 687 1059 a Fc(I)t(.)45
b(C)t Fd(O)t(M)t(M)t(A)t(N)t(D)26 b Fc(L)t Fd(I)t(S)t(T)150
1116 y
SDict begin H.S end
 150 1116 a 150 1116 a
SDict begin 12 H.A end
 150 1116 a 150 1116 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 150
1116 a 0 TeXcolorgray 206 1215 a Fc(1\))p 0 TeXcolorgray
40 w(cd)i(/scratch/spring2017/)150 1233 y
SDict begin H.S end
 150 1233 a
150 1233 a
SDict begin 12 H.A end
 150 1233 a 150 1233 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 150 1233 a 0 TeXcolorgray
206 1314 a Fc(2\))p 0 TeXcolorgray 40 w(mkdir)f(13-07)150
1329 y
SDict begin H.S end
 150 1329 a 150 1329 a
SDict begin 12 H.A end
 150 1329 a 150 1329 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 150
1329 a 0 TeXcolorgray 206 1414 a Fc(3\))p 0 TeXcolorgray
40 w(git)36 b(clone)f(git://git.yoctoproject.or)o(g/linux)o(-yo)o(cto-)
316 1513 y(3.14)27 b(in)i(13-07)e(directory)150 1531
y
SDict begin H.S end
 150 1531 a 150 1531 a
SDict begin 12 H.A end
 150 1531 a 150 1531 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 150 1531
a 0 TeXcolorgray 206 1613 a Fc(4\))p 0 TeXcolorgray 40
w(git)40 b(check)o(out)f(v3.14.26)e(Change)j(the)g(v)o(ersion)f(to)316
1713 y(v3.14.26.)150 1714 y
SDict begin H.S end
 150 1714 a 150 1714 a
SDict begin 12 H.A end
 150
1714 a 150 1714 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 150 1714 a 0 TeXcolorgray 206 1812
a Fc(5\))p 0 TeXcolorgray 40 w(source)134 b(/scratch/opt/en)m
(vironment-setup)o(-i58)o(6-)316 1912 y(pok)o(y-linux.csh)316
2012 y(Run)40 b(the)g(en)m(vironment)e(con\002guration)f(script)j(for)
316 2111 y(the)29 b(shell,)f(which)g(is)i(required)c(to)j(run)f(the)g
(qemu.)150 2129 y
SDict begin H.S end
 150 2129 a 150 2129 a
SDict begin 12 H.A end
 150 2129 a 150
2129 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 150 2129 a 0 TeXcolorgray 206 2211 a Fc(6\))p
0 TeXcolorgray 40 w(cp)154 b(/scratch/spring2017/\002les/con\002g-3.1)o
(4.2)o(6-)316 2310 y(yocto-qemu)26 b(.con\002g)150 2328
y
SDict begin H.S end
 150 2328 a 150 2328 a
SDict begin 12 H.A end
 150 2328 a 150 2328 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 150 2328
a 0 TeXcolorgray 206 2410 a Fc(7\))p 0 TeXcolorgray 40
w(mak)o(e)i(menucon\002g)150 2428 y
SDict begin H.S end
 150 2428 a 150 2428
a
SDict begin 12 H.A end
 150 2428 a 150 2428 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 150 2428 a 0 TeXcolorgray 206
2510 a Fc(8\))p 0 TeXcolorgray 40 w(/)150 2525 y
SDict begin H.S end
 150
2525 a 150 2525 a
SDict begin 12 H.A end
 150 2525 a 150 2525 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 150 2525 a 0
TeXcolorgray 206 2609 a Fc(9\))p 0 TeXcolorgray 40 w(LOCAL)-8
b(VERSION)150 2624 y
SDict begin H.S end
 150 2624 a 150 2624 a
SDict begin 12 H.A end
 150 2624 a
150 2624 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 150 2624 a 0 TeXcolorgray 164 2709 a Fc(10\))p
0 TeXcolorgray 40 w(mak)o(e)28 b(-j4)g(all)316 2809 y(This)33
b(function)f(is)i(used)f(to)g(b)n(uild)g(the)g(k)o(ernel,)f(and)316
2908 y(the)d(j4)f(\003ag)h(sets)g(the)g(thread)e(used)i(to)f(4.)316
3107 y(On)h(the)f(second)g(terminal:)150 3108 y
SDict begin H.S end
 150 3108
a 150 3108 a
SDict begin 12 H.A end
 150 3108 a 150 3108 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 150 3108 a 0 TeXcolorgray
164 3207 a Fc(11\))p 0 TeXcolorgray 40 w(source)134 b(/scratch/opt/en)m
(vironment-setup)o(-i58)o(6-)316 3307 y(pok)o(y-linux.csh)316
3406 y(This)53 b(is)h(again)e(used)h(to)g(set)h(the)f(en)m(vironment)
316 3506 y(con\002guration.)150 3524 y
SDict begin H.S end
 150 3524 a 150
3524 a
SDict begin 12 H.A end
 150 3524 a 150 3524 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 150 3524 a 0 TeXcolorgray
164 3606 a Fc(12\))p 0 TeXcolorgray 40 w(cp)352 b
(/scratch/spring2017/\002les/bzImage-)316 3705 y(qemux86.bin)25
b(.)150 3723 y
SDict begin H.S end
 150 3723 a 150 3723 a
SDict begin 12 H.A end
 150 3723 a 150 3723
a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 150 3723 a 0 TeXcolorgray 164 3805 a Fc(13\))p 0 TeXcolorgray
40 w(cp)140 b(/scratch/spring2017/\002les/core-image-lsb-)316
3904 y(sdk-qemux86.e)o(xt3)24 b(.)150 3922 y
SDict begin H.S end
 150 3922
a 150 3922 a
SDict begin 12 H.A end
 150 3922 a 150 3922 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 150 3922 a 0 TeXcolorgray
164 4004 a Fc(14\))p 0 TeXcolorgray 40 w(qemu-system-i386)246
b(-gdb)j(tcp::5637)316 4104 y(-S)201 b(-nographic)c(-k)o(ernel)j
(bzImage-)316 4203 y(qemux86.bin)133 b(-dri)n(v)o(e)j
(\002le=core-image-lsb-)316 4303 y(sdk-qemux86.e)o(xt3,if=v)o(irtio)55
b(-enable-kvm)j(-net)316 4403 y(none)73 b(-usb)g(-localtime)g
(\226no-reboot)e(\226append)316 4502 y(\224root=/de)n(v/vda)25
b(rw)k(console=ttyS0)e(deb)n(ug\224)316 4602 y(This)j(starts)g(the)f
(qemu)g(VM)g(in)h(the)f(terminal.)g(Port)316 4701 y(5637)e(is)j(used)e
(as)h(the)g(port)e(for)h(the)h(group.)316 4901 y(Back)g(to)f(the)h
(\002rst)g(terminal:)150 4902 y
SDict begin H.S end
 150 4902 a 150 4902 a
SDict begin 12 H.A end

150 4902 a 150 4902 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 150 4902 a 0 TeXcolorgray 164 5000
a Fc(15\))p 0 TeXcolorgray 40 w(gdb)150 5018 y
SDict begin H.S end
 150 5018
a 150 5018 a
SDict begin 12 H.A end
 150 5018 a 150 5018 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 150 5018 a 0 TeXcolorgray
164 5100 a Fc(16\))p 0 TeXcolorgray 40 w(tar)o(get)f(remote:5637)p
0 TeXcolorgray 0 TeXcolorgray 2000 697 a
SDict begin H.S end
 2000 697 a 2000
697 a
SDict begin 12 H.A end
 2000 697 a 2000 697 a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 2000 697 a 0 TeXcolorgray
2014 797 a Fc(17\))p 0 TeXcolorgray 40 w(continue)2166
897 y(This)45 b(will)h(connect)e(gdb)g(to)i(the)f(qemu.)f(T)-7
b(yping)2166 996 y(continue)22 b(will)j(allo)n(w)f(the)g(VM)g(to)h(run)
e(on)g(the)h(other)2166 1096 y(terminal.)2166 1196 y(On)42
b(the)f(second)g(terminal,)g(the)h(virtual)f(machine)2166
1295 y(should)27 b(no)n(w)h(be)h(sho)n(wn.)2000 1296
y
SDict begin H.S end
 2000 1296 a 2000 1296 a
SDict begin 12 H.A end
 2000 1296 a 2000 1296 a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 2000
1296 a 0 TeXcolorgray 2014 1395 a Fc(18\))p 0 TeXcolorgray
40 w(login)f(as)h(root,)e(then)h(type)g(uname)g(-a)2166
1494 y(uname)h(-a)h(is)i(used)e(to)g(print)g(the)g(system)h(informa-)
2166 1594 y(tion.)2000 1595 y
SDict begin H.S end
 2000 1595 a 2000 1595 a
SDict begin 12 H.A end

2000 1595 a 2000 1595 a
SDict begin [/View [/XYZ H.V]/Dest (Item.19) cvn /DEST pdfmark end
 2000 1595 a 0 TeXcolorgray 2014
1694 a Fc(19\))p 0 TeXcolorgray 40 w(reboot)2166 1793
y(Since)26 b(\226no-reboot)d(\003ag)j(is)h(set,)f(the)g(VM)g(will)h
(shut-)2166 1893 y(do)n(wn)g(instead)i(of)f(being)f(reboot.)2000
1911 y
SDict begin H.S end
 2000 1911 a 2000 1911 a
SDict begin 12 H.A end
 2000 1911 a 2000 1911
a
SDict begin [/View [/XYZ H.V]/Dest (Item.20) cvn /DEST pdfmark end
 2000 1911 a 0 TeXcolorgray 2014 1993 a Fc(20\))p 0
TeXcolorgray 40 w(qemu-system-i386)153 b(-gdb)j(tcp::5637)f(-)2166
2092 y(S)178 b(-nographic)c(-k)o(ernel)j(linux-yocto-)2166
2192 y(3.14/arch/x86/boot/bzIm)o(ag)o(e)58 b(-dri)n(v)o(e)k
(\002le=core-)2166 2291 y(image-lsb-sdk-qemux86.e)n(xt3)o(,if=v)o
(irtio)38 b(-enable-)2166 2391 y(kvm)59 b(-net)g(none)g(-usb)h
(-localtime)f(\226no-reboot)2166 2491 y(\226append)77
b(\224root=/de)n(v/vda)e(rw)k(console=ttyS0)2166 2590
y(deb)n(ug\224)2166 2790 y(Back)29 b(to)f(the)h(\002rst)g(terminal:)
2000 2791 y
SDict begin H.S end
 2000 2791 a 2000 2791 a
SDict begin 12 H.A end
 2000 2791 a 2000
2791 a
SDict begin [/View [/XYZ H.V]/Dest (Item.21) cvn /DEST pdfmark end
 2000 2791 a 0 TeXcolorgray 2014 2889 a Fc(21\))p
0 TeXcolorgray 40 w(gdb)2000 2907 y
SDict begin H.S end
 2000 2907 a 2000
2907 a
SDict begin 12 H.A end
 2000 2907 a 2000 2907 a
SDict begin [/View [/XYZ H.V]/Dest (Item.22) cvn /DEST pdfmark end
 2000 2907 a 0 TeXcolorgray
2014 2989 a Fc(22\))p 0 TeXcolorgray 40 w(tar)o(get)e(remote:5637)2000
3007 y
SDict begin H.S end
 2000 3007 a 2000 3007 a
SDict begin 12 H.A end
 2000 3007 a 2000 3007
a
SDict begin [/View [/XYZ H.V]/Dest (Item.23) cvn /DEST pdfmark end
 2000 3007 a 0 TeXcolorgray 2014 3088 a Fc(23\))p 0
TeXcolorgray 40 w(continue)2166 3188 y(on)h(the)g(\002rst)i(terminal:)
2000 3189 y
SDict begin H.S end
 2000 3189 a 2000 3189 a
SDict begin 12 H.A end
 2000 3189 a 2000
3189 a
SDict begin [/View [/XYZ H.V]/Dest (Item.24) cvn /DEST pdfmark end
 2000 3189 a 0 TeXcolorgray 2014 3288 a Fc(24\))p
0 TeXcolorgray 40 w(root)2000 3303 y
SDict begin H.S end
 2000 3303 a 2000
3303 a
SDict begin 12 H.A end
 2000 3303 a 2000 3303 a
SDict begin [/View [/XYZ H.V]/Dest (Item.25) cvn /DEST pdfmark end
 2000 3303 a 0 TeXcolorgray
2014 3387 a Fc(25\))p 0 TeXcolorgray 40 w(uname)d(-a)2000
3402 y
SDict begin H.S end
 2000 3402 a 2000 3402 a
SDict begin 12 H.A end
 2000 3402 a 2000 3402
a
SDict begin [/View [/XYZ H.V]/Dest (Item.26) cvn /DEST pdfmark end
 2000 3402 a 0 TeXcolorgray 2014 3487 a Fc(26\))p 0
TeXcolorgray 40 w(reboot)2000 3570 y
SDict begin H.S end
 2000 3570 a 2000
3570 a
SDict begin 12 H.A end
 2000 3570 a 2000 3570 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 2000 3570 a 2533 3652
a Fc(I)t(I)t(.)45 b(C)t Fd(O)t(N)t(C)t(U)t(R)t(R)t(E)t(N)t(C)t(Y)2000
3679 y
SDict begin H.S end
 2000 3679 a 2000 3679 a
SDict begin 12 H.A end
 2000 3679 a 2000 3679
a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.1) cvn /DEST pdfmark
end
 2000 3679 a 95 x Fb(A.)c(What)25 b(do)f(you)h(think)f(the)h(main)g
(point)f(of)i(this)f(assign-)2000 3874 y(ment)j(is?)2083
3997 y Fc(The)k(point)f(of)h(this)g(assignment)f(w)o(as)i(to)g(re)n
(vie)n(w)e(ma-)2000 4096 y(terial)44 b(from)f(CS344)h(as)h(well)g(as)g
(e)o(xpanding)d(on)h(that)2000 4196 y(material.)23 b(Speci\002cally)g
(ho)n(w)g(to)h(create)f(multiple)g(threads)2000 4296
y(in)h(a)g(C)h(program)d(and)i(ho)n(w)f(the)o(y)g(can)h(interact)g
(with)g(each)2000 4395 y(other)h(by)h(signaling.)f(In)h(addition,)f
(this)h(assignment)g(w)o(as)2000 4495 y(an)33 b(introduction)e(to)j
(incorporating)d(assembly)i(into)g(our)2000 4595 y(programs.)2000
4699 y
SDict begin H.S end
 2000 4699 a 2000 4699 a
SDict begin 12 H.A end
 2000 4699 a 2000 4699
a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.2) cvn /DEST pdfmark
end
 2000 4699 a 79 x Fb(B.)41 b(How)29 b(did)f(you)g(per)o(sonally)g
(appr)l(oac)o(h)f(the)i(pr)l(oblem?)2000 4878 y(Design)f(decisions,)g
(algorithm,)f(etc.)2083 5000 y Fc(W)-7 b(e)36 b(be)o(gun)d(by)i
(creating)f(a)i(basic)f(frame)n(w)o(ork)e(of)i(all)2000
5100 y(the)j(data)h(structures,)f(blank)f(functions,)g(and)h(v)n
(ariables)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -285 a
SDict begin H.S end
 142 -285 a 142 -285 a
SDict begin H.R end
 142 -285 a 142 -285
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 142 -285 a 0 TeXcolorgray 0 TeXcolorgray 3721 -177
a Fg(2)p 0 TeXcolorgray 150 100 a Fc(that)30 b(we)g(thought)d(w)o(ould)
i(be)h(need)e(for)h(the)h(assignment.)150 199 y(Afterw)o(ards)22
b(we)i(started)f(reading)f(man)h(pages,)g(and)g(stack)150
299 y(o)o(v)o(er\003o)n(w)28 b(threads)g(on)h(e)n(v)o(ent)g(dri)n(v)o
(en)e(programming)f(and)150 399 y(ho)n(w)42 b(to)h(accomplish)f(it.)h
(After)f(we)h(had)f(a)i(basic)f(un-)150 498 y(derstanding)35
b(of)i(e)n(v)o(ents,)f(we)i(started)f(to)g(research)f(ho)n(w)150
598 y(to)i(mak)o(e)g(threads)f(talk)h(to)g(each)g(other)-5
b(.)37 b(From)h(there)f(it)150 697 y(w)o(as)31 b(a)f(matter)f(of)h
(creating)e(the)i(setup)g(for)f(structs)h(to)g(be)150
797 y(created)23 b(and)g(deleted.)g(Then)g(passing)g(access)h(to)g(the)
g(data)150 897 y(back)j(and)g(forth)f(between)h(the)g(producer)e(and)i
(consumer)150 996 y(threads.)150 1141 y
SDict begin H.S end
 150 1141 a 150
1141 a
SDict begin 12 H.A end
 150 1141 a 150 1141 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.3) cvn /DEST pdfmark
end
 150 1141 a 100 x Fb(C.)42
b(How)29 b(did)f(you)g(ensur)m(e)g(your)h(solution)f(was)h(corr)m(ect?)
150 1341 y(T)-8 b(esting)29 b(details,)f(for)h(instance)o(.)233
1472 y Fc(First)37 b(we)g(tested)g(the)g(that)g(the)f(program)f
(created)h(an)150 1572 y(e)o(xclusi)n(v)o(e)24 b(lock)g(to)h(the)g
(struct)h(holding)d(all)i(the)h(data,)e(this)150 1672
y(w)o(as)35 b(done)e(by)g(checking)g(if)h(each)f(thread)g(w)o(ould)h
(block)150 1771 y(after)26 b(completing)e(its)k(task.)e(After)g(that)g
(w)o(as)h(v)o(eri\002ed)e(we)150 1871 y(check)e(that)i(each)e(thread)h
(successfully)f(signaled)h(to)g(each)150 1970 y(other)38
b(when)f(it)j(w)o(as)f(done)e(producing)f(or)i(consuming.)150
2070 y(This)46 b(w)o(as)h(done)e(by)g(creating)g(a)i(collection)e(of)g
(print)150 2170 y(statements)23 b(unique)f(to)i(producers)d(and)i
(consumers.)e(And)150 2269 y(\002nally)-5 b(,)23 b(since)h(in)g(our)f
(design)g(that)h(consumer)e(doesnt)h(ac-)150 2369 y(tually)i(delete)g
(data)h(b)n(ut)f(instead)g(mo)o(v)o(e)f(to)i(the)f(ne)o(xt)g(node)150
2469 y(until)32 b(the)h(arrays)e(maximum)g(and)h(wraps)g(back)g
(around.)150 2568 y(W)-7 b(e)33 b(check)o(ed)e(that)h(when)f(the)h
(producer)d(wrapped)h(back)150 2668 y(around)25 b(that)i(it)h(o)o(v)o
(erwrote)d(old)i(data.)g(This)g(w)o(as)h(v)o(eri\002ed)150
2767 y(by)g(reducing)e(w)o(ait)j(times)g(and)e(checking)g(item)h
(numbers)150 2867 y(for)43 b(duplicates)g(when)g(the)h(prodcuer)d(and)i
(consumers)150 2967 y(wrapped)27 b(back)h(to)g(the)h(front)e(of)i(our)e
(data)i(array)-5 b(.)150 3128 y
SDict begin H.S end
 150 3128 a 150 3128 a
SDict begin 12 H.A end

150 3128 a 150 3128 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.4) cvn /DEST pdfmark
end
 150 3128 a 84 x Fb(D.)41 b(What)29
b(did)f(you)g(learn?)233 3343 y Fc(From)e(the)g(concurrenc)o(y)d
(assignment)i(we)i(learned)e(the)150 3443 y(basic)49
b(concept)e(of)h(e)n(v)o(ent)g(dri)n(v)o(en)f(programming)e(and)150
3542 y(ho)n(w)j(to)g(implement)f(it)i(theoretically)d(with)j(the)f
(pro-)150 3642 y(ducer)27 b(consumer)g(problem.)g(T)-7
b(o)28 b(e)o(xpand)f(on)h(this,)g(as)h(for)150 3742 y(the)42
b(technologies)f(we)h(used)g(to)h(achie)n(v)o(e)e(e)n(v)o(ent)g(based)
150 3841 y(programming,)e(we)44 b(learned)d(ho)n(w)i(to)g(lock)f(data)h
(to)g(a)150 3941 y(particular)d(thread)h(using)g(locking)g(and)g
(unlocking.)e(as)150 4041 y(well)46 b(as)f(ho)n(w)g(to)g(mak)o(e)g
(threads)f(interact)h(with)g(each)150 4140 y(other)38
b(through)e(signaling)h(and)h(blocking)f(\(w)o(aiting)g(for)150
4240 y(the)29 b(mute)o(x)e(to)i(be)f(unlock)o(ed.\))150
4379 y
SDict begin H.S end
 150 4379 a 150 4379 a
SDict begin 12 H.A end
 150 4379 a 150 4379 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 150
4379 a 504 4466 a Fc(I)t(I)t(I)t(.)45 b(Q)t Fd(E)t(M)t(U)25
b Fc(C)t Fd(O)t(M)t(M)t(A)t(N)t(D)h(FL)t(A)q(G)t(S)263
4602 y Fb(qemu-system-i386)i(-gdb)h(tcp::????)e(-S)i(-no)o(gr)o(aphic)
150 4701 y(-k)o(ernel)84 b(bzIma)o(g)o(e-qemux86.bin)c(-drive)k
(\002le=cor)m(e-)150 4801 y(ima)o(g)o(e-lsb-sdk-qemux86.e)n
(xt3,if=virtio)f(-enable-kvm)150 4901 y(-net)65 b(none)f(-usb)g
(-localtime)h(\226no-r)m(eboot)d(\226append)150 5000
y(\224r)l(oot=/de)o(v/vda)132 b(rw)i(console=ttyS0)e(deb)n(ug\224.)p
0 TeXcolorgray 0 TeXcolorgray 2000 0 a
SDict begin H.S end
 2000 0 a 2000
0 a
SDict begin 12 H.A end
 2000 0 a 2000 0 a
SDict begin [/View [/XYZ H.V]/Dest (Item.27) cvn /DEST pdfmark end
 2000 0 a 0 TeXcolorgray 2055 100
a Fc(1\))p 0 TeXcolorgray 41 w(qemu-system-i386)2166
199 y(Be)o(gins)28 b(a)h(32bit)f(qemu)g(session.)2000
217 y
SDict begin H.S end
 2000 217 a 2000 217 a
SDict begin 12 H.A end
 2000 217 a 2000 217 a
SDict begin [/View [/XYZ H.V]/Dest (Item.28) cvn /DEST pdfmark end
 2000
217 a 0 TeXcolorgray 2055 299 a Fc(2\))p 0 TeXcolorgray
41 w(-gdb)2166 399 y(Creates)e(opens)e(a)i(gdb-serv)o(er)d(on)i(a)g
(speci\002ed)g(port.)2166 498 y(In)j(this)h(case)g(we)g(are)f(using)g
(port)g(5637)2000 516 y
SDict begin H.S end
 2000 516 a 2000 516 a
SDict begin 12 H.A end
 2000 516
a 2000 516 a
SDict begin [/View [/XYZ H.V]/Dest (Item.29) cvn /DEST pdfmark end
 2000 516 a 0 TeXcolorgray 2055 598 a Fc(3\))p
0 TeXcolorgray 41 w(-S)2166 697 y(Disallo)n(ws)h(the)f(CPU)i(to)f
(start)g(on)f(boot.)2000 698 y
SDict begin H.S end
 2000 698 a 2000 698 a
SDict begin 12 H.A end

2000 698 a 2000 698 a
SDict begin [/View [/XYZ H.V]/Dest (Item.30) cvn /DEST pdfmark end
 2000 698 a 0 TeXcolorgray 2055
797 a Fc(4\))p 0 TeXcolorgray 41 w(-nographic)2166 897
y(Qemu)55 b(is)h(set)g(to)f(a)h(command)d(line)i(interf)o(ace)2166
996 y(and)41 b(will)g(not)g(start)h(a)g(desktop)e(en)m(viroment)e(lik)o
(e)2166 1096 y(KDE,)28 b(Cinnamon,)f(or)h(Unity)-5 b(.)2000
1114 y
SDict begin H.S end
 2000 1114 a 2000 1114 a
SDict begin 12 H.A end
 2000 1114 a 2000 1114
a
SDict begin [/View [/XYZ H.V]/Dest (Item.31) cvn /DEST pdfmark end
 2000 1114 a 0 TeXcolorgray 2055 1196 a Fc(5\))p 0 TeXcolorgray
41 w(-k)o(ernel)2166 1295 y(Boots)57 b(a)g(k)o(ernel)f(without)g
(installing)h(the)g(disk)2166 1395 y(image.)2000 1413
y
SDict begin H.S end
 2000 1413 a 2000 1413 a
SDict begin 12 H.A end
 2000 1413 a 2000 1413 a
SDict begin [/View [/XYZ H.V]/Dest (Item.32) cvn /DEST pdfmark end
 2000
1413 a 0 TeXcolorgray 2055 1494 a Fc(6\))p 0 TeXcolorgray
41 w(-dri)n(v)o(e)2166 1594 y(Indicates)69 b(a)i(speci\002c)g(dri)n(v)o
(e)e(for)h(the)g(Qemu)2166 1694 y(instance.)39 b(In)h(this)g(case)g(a)g
(speci\002c)g(\002le)h(is)g(being)2166 1793 y(used)196
b(\224core-image-lsb-sdk-qemux8)o(6.e)n(xt3)o(\224.)2166
1893 y(Additionally)30 b(a)i(speci\002c)f(interf)o(ace)g(is)h(being)f
(used)2166 1993 y(\224virtio)d(-enable-kvm\224)2000 1994
y
SDict begin H.S end
 2000 1994 a 2000 1994 a
SDict begin 12 H.A end
 2000 1994 a 2000 1994 a
SDict begin [/View [/XYZ H.V]/Dest (Item.33) cvn /DEST pdfmark end
 2000
1994 a 0 TeXcolorgray 2055 2092 a Fc(7\))p 0 TeXcolorgray
41 w(-net)2166 2192 y(Pre)n(v)o(ents)65 b(the)g(k)o(ernel)g(from)f
(con\002guring)f(an)o(y)2166 2291 y(netw)o(ork)27 b(de)n(vices)h(to)h
(this)g(instance.)2000 2292 y
SDict begin H.S end
 2000 2292 a 2000 2292 a
SDict begin 12 H.A end

2000 2292 a 2000 2292 a
SDict begin [/View [/XYZ H.V]/Dest (Item.34) cvn /DEST pdfmark end
 2000 2292 a 0 TeXcolorgray 2055
2391 a Fc(8\))p 0 TeXcolorgray 41 w(-usb)2166 2491 y(Enables)f(the)g
(use)h(of)f(the)h(USB)g(dri)n(v)o(er)-5 b(.)2000 2492
y
SDict begin H.S end
 2000 2492 a 2000 2492 a
SDict begin 12 H.A end
 2000 2492 a 2000 2492 a
SDict begin [/View [/XYZ H.V]/Dest (Item.35) cvn /DEST pdfmark end
 2000
2492 a 0 TeXcolorgray 2055 2590 a Fc(9\))p 0 TeXcolorgray
41 w(-localtime)2166 2690 y(Speci\002es)59 b(the)g(local-time)f(must)i
(be)e(used)h(for)2166 2790 y(this)29 b(instance.)2000
2791 y
SDict begin H.S end
 2000 2791 a 2000 2791 a
SDict begin 12 H.A end
 2000 2791 a 2000 2791
a
SDict begin [/View [/XYZ H.V]/Dest (Item.36) cvn /DEST pdfmark end
 2000 2791 a 0 TeXcolorgray 2014 2889 a Fc(10\))p 0
TeXcolorgray 40 w(\226no-reboot)2166 2989 y(If)68 b(told)f(to)h
(reboot,)f(the)h(instance)f(will)i(end)2166 3088 y(instead.)2000
3089 y
SDict begin H.S end
 2000 3089 a 2000 3089 a
SDict begin 12 H.A end
 2000 3089 a 2000 3089
a
SDict begin [/View [/XYZ H.V]/Dest (Item.37) cvn /DEST pdfmark end
 2000 3089 a 0 TeXcolorgray 2014 3188 a Fc(11\))p 0
TeXcolorgray 40 w(\226append)2166 3288 y(Uses)29 b(a)g(speci\002c)g(k)o
(ernel)f(command)e(at)j(startup.)2000 3548 y
SDict begin H.S end
 2000 3548
a 2000 3548 a
SDict begin 12 H.A end
 2000 3548 a 2000 3548 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 2000 3548 a 2567
3647 a Fc(I)t(V)-7 b(.)46 b(G)t Fd(I)t(T)t(H)t(U)t(B)25
b Fc(L)t Fd(O)t(G)2133 3848 y Fa(Detail)177 b(A)l(uthor)99
b(Description)p 2083 3881 1744 4 v 0 TeXcolorgray 2133
3952 a
SDict begin H.S end
 2133 3952 a 0 TeXcolorgray -1 x Fc(656b014)p 0
TeXcolorgray 2423 3894 a
SDict begin H.R end
 2423 3894 a 2423 3951 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/zainkai/CS444/commit/656b01413d4a0d6a900bc7b9a0ee7f31c3aa0977)>>/Subtype
/Link H.B /ANN pdfmark end
 2423
3951 a 0 TeXcolorgray 100 w Fc(K)n(e)n(vin)154 b(Initial)28
b(commit)p 2083 3984 1744 4 v 0 TeXcolorgray 2133 4056
a
SDict begin H.S end
 2133 4056 a 0 TeXcolorgray -2 x Fc(97528f1)p 0 TeXcolorgray
2409 3997 a
SDict begin H.R end
 2409 3997 a 2409 4054 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/zainkai/CS444/commit/97528f1aee1791321dbb945b726b4e500ae66f08)>>/Subtype
/Link H.B /ANN pdfmark end
 2409 4054 a 0 TeXcolorgray
114 w Fc(K)n(e)n(vin)154 b(adding)83 b(semi)j(completed)2877
4154 y(concurrenc)o(y)p 2083 4187 1744 4 v 0 TeXcolorgray
2133 4257 a
SDict begin H.S end
 2133 4257 a 0 TeXcolorgray -1 x Fc(c878146)p
0 TeXcolorgray 2419 4200 a
SDict begin H.R end
 2419 4200 a 2419 4256 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/zainkai/CS444/commit/c878146c0d3bed1cf35b2a62476989512c8ee485)>>/Subtype
/Link H.B /ANN pdfmark end
 2419
4256 a 0 TeXcolorgray 104 w Fc(K)n(e)n(vin)154 b(\002nishing)27
b(concurrenc)o(y)e(1)p 2083 4290 1744 4 v 0 TeXcolorgray
2133 4360 a
SDict begin H.S end
 2133 4360 a 0 TeXcolorgray -1 x Fc(7428a0c)p
0 TeXcolorgray 2414 4303 a
SDict begin H.R end
 2414 4303 a 2414 4359 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/zainkai/CS444/commit/7428a0c6b8fda45aeb446f3401a300840503d9a1)>>/Subtype
/Link H.B /ANN pdfmark end
 2414
4359 a 0 TeXcolorgray 109 w Fc(K)n(e)n(vin)154 b(changing)65
b(minor)i(ne)n(wline)2877 4459 y(issue)p 2083 4492 1744
4 v 0 TeXcolorgray 2133 4564 a
SDict begin H.S end
 2133 4564 a 0 TeXcolorgray
-2 x Fc(4289f27)p 0 TeXcolorgray 2409 4505 a
SDict begin H.R end
 2409 4505
a 2409 4562 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/zainkai/CS444/commit/4289f2779b8c817314c13505d6d29c3419ae6959)>>/Subtype
/Link H.B /ANN pdfmark end
 2409 4562 a 0 TeXcolorgray 114 w Fc(K)n(e)n(vin)154
b(ironing)26 b(out)i(o)o(v)o(erwriting)e(is-)2877 4662
y(sue,)i(ref)o(actoring)p 2083 4695 1744 4 v 0 TeXcolorgray
2133 4766 a
SDict begin H.S end
 2133 4766 a 0 TeXcolorgray -1 x Fc(412720e)p
0 TeXcolorgray 2419 4708 a
SDict begin H.R end
 2419 4708 a 2419 4765 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/zainkai/CS444/commit/412720e478f97e598bd7784c140048e3e393d203)>>/Subtype
/Link H.B /ANN pdfmark end
 2419
4765 a 0 TeXcolorgray 104 w Fc(K)n(e)n(vin)154 b(ref)o(actoring)38
b(check)h(for)g(x86)2877 4864 y(system)21 b(from)g(class)i(e)o(xample)p
2083 4897 1744 4 v 0 TeXcolorgray 2133 4969 a
SDict begin H.S end
 2133 4969
a 0 TeXcolorgray -2 x Fc(065c49d)p 0 TeXcolorgray 2419
4911 a
SDict begin H.R end
 2419 4911 a 2419 4967 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/zainkai/CS444/commit/065c49da4c076338f8b9ef4d20cf2171f400e988)>>/Subtype
/Link H.B /ANN pdfmark end
 2419 4967 a 0 TeXcolorgray
104 w Fc(K)n(e)n(vin)154 b(adding)36 b(command)g(line)j(pa-)2877
5067 y(rameter)p 2083 5100 1744 4 v 0 TeXcolorgray 0
TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -285 a
SDict begin H.S end
 142 -285 a 142 -285 a
SDict begin H.R end
 142 -285 a 142 -285
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 142 -285 a 0 TeXcolorgray 0 TeXcolorgray 3721 -177
a Fg(3)p 0 TeXcolorgray 150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 12 H.A end
 150 0
a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (section.5) cvn /DEST pdfmark end
 150 0 a 760 100 a Fc(V)-7 b(.)46 b(W)s Fd(O)t(R)t(K)26
b Fc(L)t Fd(O)t(G)283 197 y Fa(Date)98 b(Name)266 b(Hours)99
b(Description)p 233 230 1820 4 v 283 300 a Fc(4/08)116
b(K)n(e)n(vin)364 b(2)189 b(Concurrenc)o(y)e(1)1343 399
y(setup)p 233 432 V 283 502 a(4/09)116 b(K)n(e)n(vin)364
b(5)189 b(Concurrenc)o(y)46 b(1)i(re-)1343 602 y(search)28
b(and)g(writing)p 233 635 V 283 705 a(4/10)116 b(K)n(e)n(vin)364
b(2)189 b(Concurrenc)o(y)e(1)1343 804 y(ref)o(actoring)p
233 837 V 283 907 a(4/13)116 b(K)n(e)n(vin)364 b(1)189
b(Concurrenc)o(y)e(1)1343 1007 y(ref)o(actoring)p 233
1040 V 283 1110 a(4/17)116 b(K)n(e)n(vin)364 b(2)189
b(writeup)p 233 1143 V 283 1213 a(4/18)116 b(K)n(e)n(vin)364
b(2)189 b(writeup)p 233 1246 V 283 1316 a(4/18)116 b(K)n(e)n(vin)364
b(3)189 b(Concurrenc)o(y)e(1)1343 1415 y(ref)o(actoring)p
233 1449 V 283 1518 a(4/18)116 b(Alessandro)189 b(2)g(VM)28
b(set)i(up)p 233 1551 V 283 1621 a(4/18)116 b(Alessandro)189
b(2)g(writeup)p 233 1654 V 791 1866 a
SDict begin H.S end
 791 1866 a 791
1866 a
SDict begin 12 H.A end
 791 1866 a 791 1866 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 791 1866 a 2 w Fc(R)t Fd(E)t(F)t(E)t(R)t
(E)t(N)t(C)t(E)t(S)150 1916 y
SDict begin H.S end
 150 1916 a 150 1916 a
SDict begin 9 H.A end
 150
1916 a 150 1916 a
SDict begin [/View [/XYZ H.V]/Dest (cite.LinuxMan31:online) cvn /DEST
pdfmark end
 150 1916 a 0 TeXcolorgray 73 x Fd([1])p
0 TeXcolorgray 42 w(Linux)78 b(manpages)g(online)h(-)e(man.cx)h(manual)
g(pages.)p 0 TeXcolorgray 269 2078 a
SDict begin H.S end
 269 2078 a 0 TeXcolorgray
-14 x Fd(https://man.cx/qemu-)t(system-)t(x86)p 1144
2073 34 5 v 39 w(64\(1\))p 0 TeXcolorgray 1327 2019 a
SDict begin H.R end

1327 2019 a 1327 2064 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://man.cx/qemu-system-x86_64\(1\))>>/Subtype
/Link H.B /ANN pdfmark end
 1327 2064 a 0 TeXcolorgray Fd(.)155
b(\(Accessed)64 b(on)269 2139 y(04/19/2017\).)150 2151
y
SDict begin H.S end
 150 2151 a 150 2151 a
SDict begin 9 H.A end
 150 2151 a 150 2151 a
SDict begin [/View [/XYZ H.V]/Dest (cite.qemusyst32:online) cvn /DEST
pdfmark end
 150 2151
a 0 TeXcolorgray 63 x Fd([2])p 0 TeXcolorgray 42 w(qemu-system-x86)p
743 2223 34 5 v 35 w(64\(1\))603 b(qemu-system-)269 2288
y(x86)250 b(debian)126 b(jessie)251 b(debian)127 b(manpages.)p
0 TeXcolorgray 269 2377 a
SDict begin H.S end
 269 2377 a 0 TeXcolorgray -14
x Fd(https://manpages.debian.or)o(g/j)q(essie)q(/qe)q(mu-)t(syste)q(m-)
t(x86/)q(qe)q(mu-)t(syste)q(m-)t(x86)p 2182 2372 34 5
v 39 w(64.1.en.html)p 0 TeXcolorgray 2555 2318 a
SDict begin H.R end
 2555
2318 a 2555 2363 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://manpages.debian.org/jessie/qemu-system-x86/qemu-system-x86_64.1.en.html)>>/Subtype
/Link H.B /ANN pdfmark end
 2555 2363 a 0 TeXcolorgray Fd(.)269
2438 y(\(Accessed)25 b(on)f(04/19/2017\).)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
